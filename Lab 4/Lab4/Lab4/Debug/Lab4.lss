
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000284  00000318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000284  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800110  00800110  00000328  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000865  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c8  00000000  00000000  00000c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d1  00000000  00000000  00001325  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  000016f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000436  00000000  00000000  000017e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000109  00000000  00000000  00001c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001d23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 09 01 	jmp	0x212	; 0x212 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e8       	ldi	r30, 0x84	; 132
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 31       	cpi	r26, 0x15	; 21
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 df 00 	call	0x1be	; 0x1be <main>
  9e:	0c 94 40 01 	jmp	0x280	; 0x280 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:



void ADC_init(){
	
	ADMUX = 0; // Limpiar configuraciones previas
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0); // Colocar voltaje de referencia como 5V
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR); // Justificar a la izquierda el registro ADC
  b2:	80 81       	ld	r24, Z
  b4:	80 62       	ori	r24, 0x20	; 32
  b6:	80 83       	st	Z, r24
	ADMUX |= (1 << MUX2) | (1 << MUX1); // Seleccionar el ADC 6
  b8:	80 81       	ld	r24, Z
  ba:	86 60       	ori	r24, 0x06	; 6
  bc:	80 83       	st	Z, r24
	
	ADCSRA = 0; // Limpiar configuraciones previas
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADPS1)| (1 << ADPS0); // Colocar prescaler de 8
  c4:	80 81       	ld	r24, Z
  c6:	83 60       	ori	r24, 0x03	; 3
  c8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADIE);// Habilitar ADC, habilitar interrupcioines
  ca:	80 81       	ld	r24, Z
  cc:	88 68       	ori	r24, 0x88	; 136
  ce:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADSC); // Inicializar lectura
  d0:	80 81       	ld	r24, Z
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret

000000d8 <setup>:
/****************************************/
// NON-Interrupt subroutines

void setup (){
	
	cli(); // Desahibilitar las insterrupciones globales
  d8:	f8 94       	cli
	UCSR0B = 0 ; // Apagar RX y TX
  da:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	//configuración de entradas y salidas
	
	//Registros DDRx
	
	DDRD = 0xFF ;// Puerto D - > Salidas
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b00001111 ;// Puerto B - > Primer nibble: salidas. PB0, PB1, PB2: Control de multiplexación. PB3: Alarma :)
  e2:	8f e0       	ldi	r24, 0x0F	; 15
  e4:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00000000; // Puerto C ->  PC4 y PC5 entradas con PBS
  e6:	17 b8       	out	0x07, r1	; 7
	
	//Registros PORTX
	
	PORTD = 0x00;// Inicializar apagado
  e8:	1b b8       	out	0x0b, r1	; 11
	PORTB = 0x00; // Inicializar apagado
  ea:	15 b8       	out	0x05, r1	; 5
	PORTC = 0b00110000; // Inicializar puerto apagado y activar pull up en PC4 y PC5
  ec:	80 e3       	ldi	r24, 0x30	; 48
  ee:	88 b9       	out	0x08, r24	; 8
	
	//Configuración de interrupciones 
	
	//Intrrupciones por cambios en puerto C: PC4 y PC5
	
	PCICR |= (1 << PCIE1); // Habilitar interrupciones en puerto C
  f0:	e8 e6       	ldi	r30, 0x68	; 104
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	80 83       	st	Z, r24
	PCMSK1 |= (1<< PCINT12); // habilitar interrupciones en PC4
  fa:	ec e6       	ldi	r30, 0x6C	; 108
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	80 61       	ori	r24, 0x10	; 16
 102:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT13); // habilitar interrupciones en PC5
 104:	80 81       	ld	r24, Z
 106:	80 62       	ori	r24, 0x20	; 32
 108:	80 83       	st	Z, r24
	
	//Configuración de interrupciones del timer0: Implementación de antirebote. 
	
	//F_CPU = 16MHz
	
	TCCR0A |= (1 << WGM01) ; // Colocar el timper en modo CTCGOat
 10a:	84 b5       	in	r24, 0x24	; 36
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02) | (1 << CS00); // Colocar prescaler de 1024
 110:	85 b5       	in	r24, 0x25	; 37
 112:	85 60       	ori	r24, 0x05	; 5
 114:	85 bd       	out	0x25, r24	; 37
	OCR0A = 78; // La cuenta debe llegar a 78 para interrumpir cada 5ms 78
 116:	8e e4       	ldi	r24, 0x4E	; 78
 118:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A); //  habilitar interrupcion por CMA
 11a:	ee e6       	ldi	r30, 0x6E	; 110
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	82 60       	ori	r24, 0x02	; 2
 122:	80 83       	st	Z, r24
	 
	 //Configuración de ADC
	 
	 ADC_init(); // Inicialización del ADC
 124:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	 
	
	
	
	sei(); // habilitar interrupciones globales
 128:	78 94       	sei
 12a:	08 95       	ret

0000012c <multiplexacion>:
}


void multiplexacion(){
	
	switch (contador_display){
 12c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <contador_display>
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	71 f0       	breq	.+28     	; 0x150 <multiplexacion+0x24>
 134:	18 f0       	brcs	.+6      	; 0x13c <multiplexacion+0x10>
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	a9 f0       	breq	.+42     	; 0x164 <multiplexacion+0x38>
 13a:	1e c0       	rjmp	.+60     	; 0x178 <multiplexacion+0x4c>
		
		case 0:
		
		PORTB &= ~((1 << PB0) | (1 << PB1) | (1 << PB2)); //Apagar displays
 13c:	85 b1       	in	r24, 0x05	; 5
 13e:	88 7f       	andi	r24, 0xF8	; 248
 140:	85 b9       	out	0x05, r24	; 5
		PORTD = contador8; // Imprimir contador controlado por pushbottoms
 142:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <contador8>
 146:	8b b9       	out	0x0b, r24	; 11
		PORTB |= (1 << PB2); // Encender el contador
 148:	85 b1       	in	r24, 0x05	; 5
 14a:	84 60       	ori	r24, 0x04	; 4
 14c:	85 b9       	out	0x05, r24	; 5
		
		break;
 14e:	08 95       	ret
		
		case 1:
		
		PORTB &= ~((1 << PB0) | (1 << PB1) | (1 << PB2)); //Apagar displays
 150:	85 b1       	in	r24, 0x05	; 5
 152:	88 7f       	andi	r24, 0xF8	; 248
 154:	85 b9       	out	0x05, r24	; 5
		PORTD = ADCnibbleHIGH; // Imprimir nibble alto
 156:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 15a:	8b b9       	out	0x0b, r24	; 11
		PORTB |= (1 << PB1); // Encender el display derecho
 15c:	85 b1       	in	r24, 0x05	; 5
 15e:	82 60       	ori	r24, 0x02	; 2
 160:	85 b9       	out	0x05, r24	; 5
		
		break;
 162:	08 95       	ret
		
		case 2:
		
		PORTB &= ~((1 << PB0) | (1 << PB1) | (1 << PB2)); //Apagar displays
 164:	85 b1       	in	r24, 0x05	; 5
 166:	88 7f       	andi	r24, 0xF8	; 248
 168:	85 b9       	out	0x05, r24	; 5
		PORTD = ADCnibbleLOW; // Imprimir nibble bajo
 16a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <ADCnibbleLOW>
 16e:	8b b9       	out	0x0b, r24	; 11
		PORTB |= (1 << PB0); // Encender el display izquierdo
 170:	85 b1       	in	r24, 0x05	; 5
 172:	81 60       	ori	r24, 0x01	; 1
 174:	85 b9       	out	0x05, r24	; 5
		
		break;
 176:	08 95       	ret
		
		default:
		contador_display = 0; // Reiniciar el control en caso de desborde no esperado.
 178:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <contador_display>
 17c:	08 95       	ret

0000017e <conversion_ADC>:
}

void conversion_ADC (uint8_t lectura, uint8_t *nibbleH, uint8_t *nibbleL){
	
	
	*nibbleL = hex_display[(lectura & 0x0F)]; // Convervar nibble bajo
 17e:	e8 2f       	mov	r30, r24
 180:	ef 70       	andi	r30, 0x0F	; 15
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	e0 50       	subi	r30, 0x00	; 0
 186:	ff 4f       	sbci	r31, 0xFF	; 255
 188:	90 81       	ld	r25, Z
 18a:	fa 01       	movw	r30, r20
 18c:	90 83       	st	Z, r25
	*nibbleH = hex_display[((lectura >> 4) & 0x0F)]; // Convervar el nibble alto
 18e:	82 95       	swap	r24
 190:	8f 70       	andi	r24, 0x0F	; 15
 192:	e8 2f       	mov	r30, r24
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	e0 50       	subi	r30, 0x00	; 0
 198:	ff 4f       	sbci	r31, 0xFF	; 255
 19a:	80 81       	ld	r24, Z
 19c:	fb 01       	movw	r30, r22
 19e:	80 83       	st	Z, r24
 1a0:	08 95       	ret

000001a2 <alarma>:

}

void alarma (){
	
	if (contadorADC > contador8){
 1a2:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <contadorADC>
 1a6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <contador8>
 1aa:	89 17       	cp	r24, r25
 1ac:	20 f4       	brcc	.+8      	; 0x1b6 <alarma+0x14>
		
		PORTB |= (1 << PB3); // Si contadorADC es mayor a contador8, encender alarma
 1ae:	85 b1       	in	r24, 0x05	; 5
 1b0:	88 60       	ori	r24, 0x08	; 8
 1b2:	85 b9       	out	0x05, r24	; 5
 1b4:	08 95       	ret
	} else {
		
		PORTB &= ~(1 << PB3); // Si contadorADC NO es mayor a contador8, mantener alarma apagada
 1b6:	85 b1       	in	r24, 0x05	; 5
 1b8:	87 7f       	andi	r24, 0xF7	; 247
 1ba:	85 b9       	out	0x05, r24	; 5
 1bc:	08 95       	ret

000001be <main>:

int main(void)
{
	
	
	setup(); 
 1be:	0e 94 6c 00 	call	0xd8	; 0xd8 <setup>
	
	while (1)
	{
		
		conversion_ADC(contadorADC, &ADCnibbleLOW, &ADCnibbleHIGH ); // Conversión a hexadecimal de cada nibble del contadorADC
 1c2:	40 e1       	ldi	r20, 0x10	; 16
 1c4:	51 e0       	ldi	r21, 0x01	; 1
 1c6:	61 e1       	ldi	r22, 0x11	; 17
 1c8:	71 e0       	ldi	r23, 0x01	; 1
 1ca:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <contadorADC>
 1ce:	0e 94 bf 00 	call	0x17e	; 0x17e <conversion_ADC>
		multiplexacion(); // Multiplexación y registros que se muestran en las salidas
 1d2:	0e 94 96 00 	call	0x12c	; 0x12c <multiplexacion>
		alarma (); // Manejo de la alarma
 1d6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <alarma>
 1da:	f3 cf       	rjmp	.-26     	; 0x1c2 <main+0x4>

000001dc <__vector_4>:
	
}

// Interrupt routines

ISR(PCINT1_vect){
 1dc:	1f 92       	push	r1
 1de:	0f 92       	push	r0
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	0f 92       	push	r0
 1e4:	11 24       	eor	r1, r1
 1e6:	8f 93       	push	r24
	
	// Rutina de interrupcion por cambios en puerto C: PC4 y PC5 
	

	if ( !(PINC & (1 << PC4) ))  // PINC_register == 0b00010000
 1e8:	34 99       	sbic	0x06, 4	; 6
 1ea:	06 c0       	rjmp	.+12     	; 0x1f8 <__vector_4+0x1c>
	{
		contador8++; // Si se presiono PC4 incrementar
 1ec:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <contador8>
 1f0:	8f 5f       	subi	r24, 0xFF	; 255
 1f2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <contador8>
 1f6:	07 c0       	rjmp	.+14     	; 0x206 <__vector_4+0x2a>
	} else if (!(PINC & (1 << PC5) )) // PINC_register == 0b00100000
 1f8:	35 99       	sbic	0x06, 5	; 6
 1fa:	05 c0       	rjmp	.+10     	; 0x206 <__vector_4+0x2a>
	{
		contador8--; // Si re presiono PC5 decrementar
 1fc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <contador8>
 200:	81 50       	subi	r24, 0x01	; 1
 202:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <contador8>
	}
	
}
 206:	8f 91       	pop	r24
 208:	0f 90       	pop	r0
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	0f 90       	pop	r0
 20e:	1f 90       	pop	r1
 210:	18 95       	reti

00000212 <__vector_14>:

// Rutina de interrupción por timer0. Ocurre cada 10ms
ISR (TIMER0_COMPA_vect){
 212:	1f 92       	push	r1
 214:	0f 92       	push	r0
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	0f 92       	push	r0
 21a:	11 24       	eor	r1, r1
 21c:	8f 93       	push	r24
 21e:	ef 93       	push	r30
 220:	ff 93       	push	r31
	
		ADCSRA |= (1 << ADSC);
 222:	ea e7       	ldi	r30, 0x7A	; 122
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	80 64       	ori	r24, 0x40	; 64
 22a:	80 83       	st	Z, r24

	
	contador_display++; // Intercambiar valor de contador_display entre 0 1 y 2
 22c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <contador_display>
 230:	8f 5f       	subi	r24, 0xFF	; 255
 232:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <contador_display>
	
	if ( contador_display >= 3)
 236:	83 30       	cpi	r24, 0x03	; 3
 238:	10 f0       	brcs	.+4      	; 0x23e <__vector_14+0x2c>
	{
		contador_display = 0; // Luego de 30ms resetear la cuenta
 23a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <contador_display>
	}
	
	
}
 23e:	ff 91       	pop	r31
 240:	ef 91       	pop	r30
 242:	8f 91       	pop	r24
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <__vector_21>:

// Rutina de interrupción por ADC
ISR(ADC_vect){
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	8f 93       	push	r24
 25a:	ef 93       	push	r30
 25c:	ff 93       	push	r31
	
	
	contadorADC = ADCH;
 25e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 262:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <contadorADC>
	ADCSRA |= (1 << ADSC); // Volver a leer
 266:	ea e7       	ldi	r30, 0x7A	; 122
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	80 64       	ori	r24, 0x40	; 64
 26e:	80 83       	st	Z, r24
	
 270:	ff 91       	pop	r31
 272:	ef 91       	pop	r30
 274:	8f 91       	pop	r24
 276:	0f 90       	pop	r0
 278:	0f be       	out	0x3f, r0	; 63
 27a:	0f 90       	pop	r0
 27c:	1f 90       	pop	r1
 27e:	18 95       	reti

00000280 <_exit>:
 280:	f8 94       	cli

00000282 <__stop_program>:
 282:	ff cf       	rjmp	.-2      	; 0x282 <__stop_program>
