
Prelab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000112  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000186  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006fd  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000644  00000000  00000000  00000925  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000026c  00000000  00000000  00000f69  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000011d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039e  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  000015ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001606  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  88:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
/****************************************/
// NON-Interrupt subroutines

void setup (){
	
	cli(); // Desahibilitar las insterrupciones globales
  90:	f8 94       	cli
	UCSR0B = 0 ; // Apagar RX y TX
  92:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	//configuración de entradas y salidas
	
	//Registros DDRx
	
	DDRD = 0xFF ;// Puerto D - > Salidas
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b00001111 ;// Puerto B - > nible 1: salidas
  9a:	8f e0       	ldi	r24, 0x0F	; 15
  9c:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00001111; // Puerto C -> nible 1: salidas ; PC4 y PC5 entradas con PBS
  9e:	87 b9       	out	0x07, r24	; 7
	
	//Registros PORTX
	
	PORTD = 0x00;// Inicializar apagado
  a0:	1b b8       	out	0x0b, r1	; 11
	PORTB = 0x00; // Inicializar apagado
  a2:	15 b8       	out	0x05, r1	; 5
	PORTC = 0b00110000; // Inicializar puerto apagado y activar pull up en PC4 y PC5
  a4:	80 e3       	ldi	r24, 0x30	; 48
  a6:	88 b9       	out	0x08, r24	; 8
	
	//Configuración de interrupciones 
	
	//Intrrupciones por cambios en puerto C: PC4 y PC5
	
	PCICR |= (1 << PCIE1); // Habilitar interrupciones en puerto C
  a8:	e8 e6       	ldi	r30, 0x68	; 104
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	80 83       	st	Z, r24
	PCMSK1 |= (1<< PCINT12); // habilitar interrupciones en PC4
  b2:	ec e6       	ldi	r30, 0x6C	; 108
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	80 61       	ori	r24, 0x10	; 16
  ba:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT13); // habilitar interrupciones en PC5
  bc:	80 81       	ld	r24, Z
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	80 83       	st	Z, r24
	
	sei(); // habilitar interrupciones globales
  c2:	78 94       	sei
  c4:	08 95       	ret

000000c6 <main>:

int main(void)
{
	
	
	setup(); 
  c6:	0e 94 48 00 	call	0x90	; 0x90 <setup>
	while (1)
	{
		PORTD = contador8;
  ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ce:	8b b9       	out	0x0b, r24	; 11
  d0:	fc cf       	rjmp	.-8      	; 0xca <main+0x4>

000000d2 <__vector_4>:
*/ ///

/****************************************/
// Interrupt routines

ISR(PCINT1_vect){
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	8f 93       	push	r24
	
	// Rutina de interrupcion por cambios en puerto C: PC4 y PC5 
	
	PINC_register = PINC;
  de:	86 b1       	in	r24, 0x06	; 6
  e0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <PINC_register>
	
	if (PINC_register == 0b00010000)
  e4:	80 31       	cpi	r24, 0x10	; 16
  e6:	31 f4       	brne	.+12     	; 0xf4 <__vector_4+0x22>
	{
		contador8++; // Si se presiono PC4 incrementar
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ec:	8f 5f       	subi	r24, 0xFF	; 255
  ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  f2:	07 c0       	rjmp	.+14     	; 0x102 <__vector_4+0x30>
	} else if (PINC_register == 0b00100000)
  f4:	80 32       	cpi	r24, 0x20	; 32
  f6:	29 f4       	brne	.+10     	; 0x102 <__vector_4+0x30>
	{
		contador8--; // Si re presiono PC5 decrementar
  f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fc:	81 50       	subi	r24, 0x01	; 1
  fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	
	
}
 102:	8f 91       	pop	r24
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
