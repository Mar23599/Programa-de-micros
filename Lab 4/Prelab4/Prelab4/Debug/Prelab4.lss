
Prelab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000212  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000212  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000743  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000644  00000000  00000000  00000a07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ec  00000000  00000000  0000104b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00001338  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c0  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  00001788  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000181a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 88 00 	call	0x110	; 0x110 <main>
  88:	0c 94 cd 00 	jmp	0x19a	; 0x19a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
/****************************************/
// NON-Interrupt subroutines

void setup (){
	
	cli(); // Desahibilitar las insterrupciones globales
  90:	f8 94       	cli
	UCSR0B = 0 ; // Apagar RX y TX
  92:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	//configuración de entradas y salidas
	
	//Registros DDRx
	
	DDRD = 0xFF ;// Puerto D - > Salidas
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b00001111 ;// Puerto B - > nible 1: salidas
  9a:	8f e0       	ldi	r24, 0x0F	; 15
  9c:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b00001111; // Puerto C -> nible 1: salidas ; PC4 y PC5 entradas con PBS
  9e:	87 b9       	out	0x07, r24	; 7
	
	//Registros PORTX
	
	PORTD = 0x00;// Inicializar apagado
  a0:	1b b8       	out	0x0b, r1	; 11
	PORTB = 0x00; // Inicializar apagado
  a2:	15 b8       	out	0x05, r1	; 5
	PORTC = 0b00110000; // Inicializar puerto apagado y activar pull up en PC4 y PC5
  a4:	80 e3       	ldi	r24, 0x30	; 48
  a6:	88 b9       	out	0x08, r24	; 8
	
	//Configuración de interrupciones 
	
	//Intrrupciones por cambios en puerto C: PC4 y PC5
	
	PCICR |= (1 << PCIE1); // Habilitar interrupciones en puerto C
  a8:	e8 e6       	ldi	r30, 0x68	; 104
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	80 83       	st	Z, r24
	PCMSK1 |= (1<< PCINT12); // habilitar interrupciones en PC4
  b2:	ec e6       	ldi	r30, 0x6C	; 108
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	80 61       	ori	r24, 0x10	; 16
  ba:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT13); // habilitar interrupciones en PC5
  bc:	80 81       	ld	r24, Z
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	80 83       	st	Z, r24
	
	//Configuración de interrupciones del timer0: Implementación de antirebote. 
	
	//F_CPU = 16MHz
	
	TCCR0A |= (1 << WGM01) ; // Colocar el timper en modo CTCGOat
  c2:	84 b5       	in	r24, 0x24	; 36
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02) | (1 << CS00); // Colocar prescaler de 1024
  c8:	85 b5       	in	r24, 0x25	; 37
  ca:	85 60       	ori	r24, 0x05	; 5
  cc:	85 bd       	out	0x25, r24	; 37
	OCR0A = 156; // La cuenta debe llegar a 156 para interrumpir cada 10ms
  ce:	8c e9       	ldi	r24, 0x9C	; 156
  d0:	87 bd       	out	0x27, r24	; 39
	TIMSK0 &= ~(1 << OCIE0A); // NO habilitar interrupcion por CMA
  d2:	ee e6       	ldi	r30, 0x6E	; 110
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	8d 7f       	andi	r24, 0xFD	; 253
  da:	80 83       	st	Z, r24
	 
	
	
	sei(); // habilitar interrupciones globales
  dc:	78 94       	sei
  de:	08 95       	ret

000000e0 <print_contador8>:


void print_contador8(){
	
	// Dividir contador8 en sus dos nibbles
	contador8_LOW = contador8 & 0x0F ; // mascara para conservar nibble 1 
  e0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <contador8>
  e4:	98 2f       	mov	r25, r24
  e6:	9f 70       	andi	r25, 0x0F	; 15
  e8:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <contador8_LOW>
	contador8_HIGH = contador8 & 0xF0 ; // mascara para concervar nibble 2
  ec:	80 7f       	andi	r24, 0xF0	; 240
	contador8_HIGH = (contador8_HIGH) |(contador8_HIGH >> 4); // Mascara para pasar el nibble 2 al primer nible del contador8_HIGH
  ee:	28 2f       	mov	r18, r24
  f0:	22 95       	swap	r18
  f2:	2f 70       	andi	r18, 0x0F	; 15
  f4:	82 2b       	or	r24, r18
  f6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <contador8_HIGH>
	
	PORTC = (PORTC & 0b11110000) | (contador8_LOW); // Imprimir nibble 1 en PORTC //AQUI HAY ERROR
  fa:	88 b1       	in	r24, 0x08	; 8
  fc:	80 7f       	andi	r24, 0xF0	; 240
  fe:	98 2b       	or	r25, r24
 100:	98 b9       	out	0x08, r25	; 8
	PORTB = (PORTB & 0xF0) | (contador8_HIGH); // Imprimir nibble 2 en PORTB
 102:	85 b1       	in	r24, 0x05	; 5
 104:	80 7f       	andi	r24, 0xF0	; 240
 106:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <contador8_HIGH>
 10a:	89 2b       	or	r24, r25
 10c:	85 b9       	out	0x05, r24	; 5
 10e:	08 95       	ret

00000110 <main>:

int main(void)
{
	
	
	setup(); 
 110:	0e 94 48 00 	call	0x90	; 0x90 <setup>
	while (1)
	{
		PORTD = contador8;
 114:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <contador8>
 118:	8b b9       	out	0x0b, r24	; 11
		//PORTB = contador8;
		print_contador8();
 11a:	0e 94 70 00 	call	0xe0	; 0xe0 <print_contador8>
 11e:	fa cf       	rjmp	.-12     	; 0x114 <main+0x4>

00000120 <__vector_4>:



// Interrupt routines

ISR(PCINT1_vect){
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	8f 93       	push	r24
	// Rutina de interrupcion por cambios en puerto C: PC4 y PC5 
	
//	TIMSK0 |= (1 << OCIE0A); // HABILITAR interrupciones del timer0 CMA
	

	if ( !(PINC & (1 << PC4) ))  // PINC_register == 0b00010000
 12c:	34 99       	sbic	0x06, 4	; 6
 12e:	06 c0       	rjmp	.+12     	; 0x13c <__vector_4+0x1c>
	{
		contador8++; // Si se presiono PC4 incrementar
 130:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <contador8>
 134:	8f 5f       	subi	r24, 0xFF	; 255
 136:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <contador8>
 13a:	07 c0       	rjmp	.+14     	; 0x14a <__vector_4+0x2a>
	} else if (!(PINC & (1 << PC5) )) // PINC_register == 0b00100000
 13c:	35 99       	sbic	0x06, 5	; 6
 13e:	05 c0       	rjmp	.+10     	; 0x14a <__vector_4+0x2a>
	{
		contador8--; // Si re presiono PC5 decrementar
 140:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <contador8>
 144:	81 50       	subi	r24, 0x01	; 1
 146:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <contador8>
	

	
	
	
}
 14a:	8f 91       	pop	r24
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <__vector_14>:

ISR (TIMER0_COMPA_vect){
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	8f 93       	push	r24
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
	
	contador_timer0++; //Incrementar cada 10ms
 166:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 16a:	8f 5f       	subi	r24, 0xFF	; 255
 16c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	if (contador_timer0 == 10) // Cada 100ms revisar antirebote
 170:	8a 30       	cpi	r24, 0x0A	; 10
 172:	59 f4       	brne	.+22     	; 0x18a <__vector_14+0x34>
	{
		
		contador_timer0 = 0; // Limpiar la cuenta de tiempo
 174:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		PINC_register =  (PINC & 0b00110000); // Leer PINC 
 178:	86 b1       	in	r24, 0x06	; 6
 17a:	80 73       	andi	r24, 0x30	; 48
 17c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <PINC_register>
		TIMSK0 &= ~(1 << OCIE0A); // DESABILITAR interrupciones del timer0 CMP
 180:	ee e6       	ldi	r30, 0x6E	; 110
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	8d 7f       	andi	r24, 0xFD	; 253
 188:	80 83       	st	Z, r24
	}
	
	//Si contador_timer0 no es 10, entonces salir de la ISR
}
 18a:	ff 91       	pop	r31
 18c:	ef 91       	pop	r30
 18e:	8f 91       	pop	r24
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <_exit>:
 19a:	f8 94       	cli

0000019c <__stop_program>:
 19c:	ff cf       	rjmp	.-2      	; 0x19c <__stop_program>
