
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000112  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000112  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000760  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000698  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028e  00000000  00000000  00001050  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000012e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a8  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000057  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000174f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e1       	ldi	r30, 0x12	; 18
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  8e:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <setup>:
/****************************************/
// NON-Interrupt subroutines

void setup(){
	
	cli();
  96:	f8 94       	cli
	
	//Configuracion de Puerto B
	
	DDRB = 0xFF; // Todo el puerto B funciona como salida
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	84 b9       	out	0x04, r24	; 4
	
	
	//Configuración del Puerto C
	DDRC &= ~(1 << 7); // El PC 7 funciona como salida. 
  9c:	87 b1       	in	r24, 0x07	; 7
  9e:	8f 77       	andi	r24, 0x7F	; 127
  a0:	87 b9       	out	0x07, r24	; 7
	
	
	sei();
  a2:	78 94       	sei
  a4:	08 95       	ret

000000a6 <UART_init>:
	
}

void UART_init(){
	
	DDRD |= (1 << 1); // PD1 es TX que funciona como salida
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << 0);// PD0 es RX que funciona como entrada
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	8e 7f       	andi	r24, 0xFE	; 254
  b0:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0); // Habilitar TX, RX. habilitar la interrupción RX
  b2:	88 e9       	ldi	r24, 0x98	; 152
  b4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); //configuracion:  enviar y recibir 8 bits, 1 stop bit, 
  b8:	86 e0       	ldi	r24, 0x06	; 6
  ba:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0 = 103; // 9600 baundrys
  be:	87 e6       	ldi	r24, 0x67	; 103
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  c6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ca:	08 95       	ret

000000cc <WRITE_char>:
	
}

void WRITE_char(char caracter){
	
	while ( !(UCSR0A & (1 << UDRE0)) ); // Esperar a que TX quede vacio
  cc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d0:	95 ff       	sbrs	r25, 5
  d2:	fc cf       	rjmp	.-8      	; 0xcc <WRITE_char>
	UDR0 = caracter; // Enviar caracter
  d4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  d8:	08 95       	ret

000000da <WRITE_chain>:
	
}


void WRITE_chain (char* cadena){
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	ec 01       	movw	r28, r24
	
		while (*cadena){          // Mientras no sea el carácter nulo '\0'
  e0:	03 c0       	rjmp	.+6      	; 0xe8 <WRITE_chain+0xe>
			WRITE_char(*cadena);  // Enviar cada caracter
  e2:	0e 94 66 00 	call	0xcc	; 0xcc <WRITE_char>
			cadena++;			//El puntero cambia de caracter de la cadena hasta recorrerla completamentet
  e6:	21 96       	adiw	r28, 0x01	; 1
}


void WRITE_chain (char* cadena){
	
		while (*cadena){          // Mientras no sea el carácter nulo '\0'
  e8:	88 81       	ld	r24, Y
  ea:	81 11       	cpse	r24, r1
  ec:	fa cf       	rjmp	.-12     	; 0xe2 <WRITE_chain+0x8>
			WRITE_char(*cadena);  // Enviar cada caracter
			cadena++;			//El puntero cambia de caracter de la cadena hasta recorrerla completamentet
		
}
}
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <main>:
// Main Function

int main(void)
{
	
	setup();
  f4:	0e 94 4b 00 	call	0x96	; 0x96 <setup>
	UART_init();
  f8:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_init>
	
	WRITE_chain("Hola mundo\r\n"); // Enviar Hola mundo
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	0e 94 6d 00 	call	0xda	; 0xda <WRITE_chain>
	
	WRITE_chain("Hola Héctor :) \r\n"); 
 104:	8d e0       	ldi	r24, 0x0D	; 13
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	0e 94 6d 00 	call	0xda	; 0xda <WRITE_chain>
 10c:	ff cf       	rjmp	.-2      	; 0x10c <main+0x18>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
