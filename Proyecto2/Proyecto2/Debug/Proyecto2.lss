
Proyecto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  00000452  000004e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000452  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800192  00800192  00000578  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000be4  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086d  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000760  00000000  00000000  00001b09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  0000226c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049b  00000000  00000000  000023c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000265  00000000  00000000  00002863  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002ac8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 33 01 	jmp	0x266	; 0x266 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e5       	ldi	r30, 0x52	; 82
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 39       	cpi	r26, 0x92	; 146
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e9       	ldi	r26, 0x92	; 146
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 39       	cpi	r26, 0x96	; 150
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 2e 01 	call	0x25c	; 0x25c <main>
  9e:	0c 94 27 02 	jmp	0x44e	; 0x44e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:
#include "Libreria_ADC.h"

void ADC_init(){
	
	//Función para inicializar el ADC.
	ADMUX = 0;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0 ); // Referencia de lectura: 5v.
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR); // Colocar la justificación a la izquierda
  b2:	80 81       	ld	r24, Z
  b4:	80 62       	ori	r24, 0x20	; 32
  b6:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  b8:	ea e7       	ldi	r30, 0x7A	; 122
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	10 82       	st	Z, r1
	ADCSRA |= ((1 << ADPS1) | (1 << ADPS0)); // colocar prescaler de 8
  be:	80 81       	ld	r24, Z
  c0:	83 60       	ori	r24, 0x03	; 3
  c2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); // Habiliar ADC
  c4:	80 81       	ld	r24, Z
  c6:	80 68       	ori	r24, 0x80	; 128
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <ADC_canal>:

uint8_t ADC_canal (uint8_t canal){
	
	//Función para lectura de ADC en un canal especifico
	
	if (canal >= 9){
  cc:	89 30       	cpi	r24, 0x09	; 9
  ce:	08 f0       	brcs	.+2      	; 0xd2 <ADC_canal+0x6>
		
		canal = 7; // En caso de ingresar un numero fuera del rango, se habilitara el ADC7 por default. 
  d0:	87 e0       	ldi	r24, 0x07	; 7
	} 
	
	ADMUX = (ADMUX & 0b11110000) | (canal & 0x0F); // Seleccionar un canal
  d2:	ec e7       	ldi	r30, 0x7C	; 124
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	90 81       	ld	r25, Z
  d8:	90 7f       	andi	r25, 0xF0	; 240
  da:	8f 70       	andi	r24, 0x0F	; 15
  dc:	89 2b       	or	r24, r25
  de:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Inicializar conversion
  e0:	ea e7       	ldi	r30, 0x7A	; 122
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	80 83       	st	Z, r24
	
	
	while (ADCSRA & (1 << ADSC)); // Salir cuando la lectura termine
  ea:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  ee:	86 fd       	sbrc	r24, 6
  f0:	fc cf       	rjmp	.-8      	; 0xea <ADC_canal+0x1e>
	
	
	return ADCH; // La función regresa el valor de ADCH
  f2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	
}
  f6:	08 95       	ret

000000f8 <setup>:
// NON-Interrupt subroutines


void setup(){
	
	cli();
  f8:	f8 94       	cli
	PC7, PC6, PC5, PC4: Potenciometros ; PC3: PushBottom
	PINES DE SALIDA:
	PC2, PC1 y PC0: LEDS de estado
	*/ 
	
	DDRC = 0b00000111; // Declarar Pines de entrada y salida. 
  fa:	87 e0       	ldi	r24, 0x07	; 7
  fc:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PORTC3); // Activar pull-up interno en el PB3
  fe:	88 b1       	in	r24, 0x08	; 8
 100:	88 60       	ori	r24, 0x08	; 8
 102:	88 b9       	out	0x08, r24	; 8
	
	// Configuración de interrupciones por cambios en PC3
	
	PCICR |= (1 << PCIE1); // Habilitar Interrupciones en Puerto C
 104:	e8 e6       	ldi	r30, 0x68	; 104
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT11); // habilitar interrupciones para PC3
 10e:	ec e6       	ldi	r30, 0x6C	; 108
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	88 60       	ori	r24, 0x08	; 8
 116:	80 83       	st	Z, r24
	
	//Inicialización de UART
	
	UART_init(); //Inicializar UART
 118:	0e 94 cd 01 	call	0x39a	; 0x39a <UART_init>
	
	//Inicialización de ADC
	
	ADC_init(); // Inicializar ADC
 11c:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	
	//Inicialización de PWM0
	
	
	TMR0_init_PWM(1024); // Inicializar PWM0 con prescalador de 1024. Frecuencia = 61Hz; Periodo: 0.0164s = 16.4ms
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	94 e0       	ldi	r25, 0x04	; 4
 124:	0e 94 46 01 	call	0x28c	; 0x28c <TMR0_init_PWM>
	
	// registros para manejo: OCR0A y OCR0B
	
	//Inicialización de PWM1
	
	TMR1_init_PWM(1024, 312 ); // Inicializar PWM1 con prescalador de 1024. Frecuencia = 50HZ; Periodo = 20ms
 128:	68 e3       	ldi	r22, 0x38	; 56
 12a:	71 e0       	ldi	r23, 0x01	; 1
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	94 e0       	ldi	r25, 0x04	; 4
 130:	0e 94 81 01 	call	0x302	; 0x302 <TMR1_init_PWM>
	
	//Registros para manejo: OCR1A y OCR1B
	
	
	sei();
 134:	78 94       	sei
 136:	08 95       	ret

00000138 <modo_munual>:
	}
	
}


void modo_munual(){
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
	
	
	// Control de los servomotores por de forma manual
	OCR1B = 14+ (ADC_canal(7) * 25)/255; //Debe variar entre 11 y 36;
 13e:	87 e0       	ldi	r24, 0x07	; 7
 140:	0e 94 66 00 	call	0xcc	; 0xcc <ADC_canal>
 144:	c9 e1       	ldi	r28, 0x19	; 25
 146:	c8 9f       	mul	r28, r24
 148:	c0 01       	movw	r24, r0
 14a:	11 24       	eor	r1, r1
 14c:	0f ef       	ldi	r16, 0xFF	; 255
 14e:	10 e0       	ldi	r17, 0x00	; 0
 150:	b8 01       	movw	r22, r16
 152:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__divmodhi4>
 156:	62 5f       	subi	r22, 0xF2	; 242
 158:	7f 4f       	sbci	r23, 0xFF	; 255
 15a:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 15e:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	OCR1A = 14+ (ADC_canal(6) * 25)/255; //Debe variar entre 11 y 36;
 162:	86 e0       	ldi	r24, 0x06	; 6
 164:	0e 94 66 00 	call	0xcc	; 0xcc <ADC_canal>
 168:	c8 9f       	mul	r28, r24
 16a:	c0 01       	movw	r24, r0
 16c:	11 24       	eor	r1, r1
 16e:	b8 01       	movw	r22, r16
 170:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__divmodhi4>
 174:	62 5f       	subi	r22, 0xF2	; 242
 176:	7f 4f       	sbci	r23, 0xFF	; 255
 178:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 17c:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	OCR0A = 11 + (ADC_canal(5) * 25)/255; // Debe variar entre 16 - 24 - 32
 180:	85 e0       	ldi	r24, 0x05	; 5
 182:	0e 94 66 00 	call	0xcc	; 0xcc <ADC_canal>
 186:	c8 9f       	mul	r28, r24
 188:	c0 01       	movw	r24, r0
 18a:	11 24       	eor	r1, r1
 18c:	b8 01       	movw	r22, r16
 18e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__divmodhi4>
 192:	65 5f       	subi	r22, 0xF5	; 245
 194:	67 bd       	out	0x27, r22	; 39
	OCR0B = 11 + (ADC_canal(4) * 25)/255; // Debe variar entre 16 - 24 - 32
 196:	84 e0       	ldi	r24, 0x04	; 4
 198:	0e 94 66 00 	call	0xcc	; 0xcc <ADC_canal>
 19c:	c8 9f       	mul	r28, r24
 19e:	c0 01       	movw	r24, r0
 1a0:	11 24       	eor	r1, r1
 1a2:	b8 01       	movw	r22, r16
 1a4:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__divmodhi4>
 1a8:	65 5f       	subi	r22, 0xF5	; 245
 1aa:	68 bd       	out	0x28, r22	; 40
	
	
}
 1ac:	cf 91       	pop	r28
 1ae:	1f 91       	pop	r17
 1b0:	0f 91       	pop	r16
 1b2:	08 95       	ret

000001b4 <EPROM_mode>:

void EPROM_mode(){
	
	
		while(flag_menu_EPROM == 0){
 1b4:	13 c0       	rjmp	.+38     	; 0x1dc <EPROM_mode+0x28>
			
			//Desplegar menu
			UART_send_chain(" \n -----MODO EPROM----- \n");
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <UART_send_chain>
			UART_send_chain("Seleccione una opción: \n");
 1be:	8a e1       	ldi	r24, 0x1A	; 26
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <UART_send_chain>
			UART_send_chain("GUARDAR POSICIONES: 1\n");
 1c6:	83 e3       	ldi	r24, 0x33	; 51
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <UART_send_chain>
			UART_send_chain("VER POSICIONES GUARDADAS: 2\n");
 1ce:	8a e4       	ldi	r24, 0x4A	; 74
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <UART_send_chain>
			
			flag_menu_EPROM = 1; //Apagar menu
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
}

void EPROM_mode(){
	
	
		while(flag_menu_EPROM == 0){
 1dc:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
 1e0:	88 23       	and	r24, r24
 1e2:	49 f3       	breq	.-46     	; 0x1b6 <EPROM_mode+0x2>
			UART_send_chain("VER POSICIONES GUARDADAS: 2\n");
			
			flag_menu_EPROM = 1; //Apagar menu
		}
		
		menu_opcion = UART_receive_char();
 1e4:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <UART_receive_char>
 1e8:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <menu_opcion>
		
		switch (menu_opcion){
 1ec:	81 33       	cpi	r24, 0x31	; 49
 1ee:	19 f0       	breq	.+6      	; 0x1f6 <EPROM_mode+0x42>
 1f0:	82 33       	cpi	r24, 0x32	; 50
 1f2:	31 f0       	breq	.+12     	; 0x200 <EPROM_mode+0x4c>
 1f4:	0a c0       	rjmp	.+20     	; 0x20a <EPROM_mode+0x56>
			
			case '1':
			UART_send_chain("OPCION 1 \n");
 1f6:	87 e6       	ldi	r24, 0x67	; 103
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <UART_send_chain>
			break;
 1fe:	08 95       	ret
			
			case '2':
			UART_send_chain("OPCION 2 \n");
 200:	82 e7       	ldi	r24, 0x72	; 114
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <UART_send_chain>
			break;
 208:	08 95       	ret
			
			default:
			UART_send_chain("Envie opcion valida\n");
 20a:	8d e7       	ldi	r24, 0x7D	; 125
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <UART_send_chain>
 212:	08 95       	ret

00000214 <display_menu>:
}


void display_menu(){
	
	switch (contador_modo){
 214:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <contador_modo>
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	69 f0       	breq	.+26     	; 0x236 <display_menu+0x22>
 21c:	18 f0       	brcs	.+6      	; 0x224 <display_menu+0x10>
 21e:	82 30       	cpi	r24, 0x02	; 2
 220:	99 f0       	breq	.+38     	; 0x248 <display_menu+0x34>
 222:	19 c0       	rjmp	.+50     	; 0x256 <display_menu+0x42>
		
		case 0:
		
		PORTC |= (1 << PORTC0); // Encender PC0
 224:	88 b1       	in	r24, 0x08	; 8
 226:	81 60       	ori	r24, 0x01	; 1
 228:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~( (1 << PORTC1)|( 1 << PORTC2) );	//Apagar PC1 y PC2
 22a:	88 b1       	in	r24, 0x08	; 8
 22c:	89 7f       	andi	r24, 0xF9	; 249
 22e:	88 b9       	out	0x08, r24	; 8
		
		modo_munual(); // Mover servomotores con potenciometros	
 230:	0e 94 9c 00 	call	0x138	; 0x138 <modo_munual>

		break;
 234:	08 95       	ret
		
		case 1:
		
		PORTC |= (1 << PORTC1); // Encender PC1
 236:	88 b1       	in	r24, 0x08	; 8
 238:	82 60       	ori	r24, 0x02	; 2
 23a:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~( (1 << PORTC0)|( 1 << PORTC2) );	//Apagar PC0 y PC2
 23c:	88 b1       	in	r24, 0x08	; 8
 23e:	8a 7f       	andi	r24, 0xFA	; 250
 240:	88 b9       	out	0x08, r24	; 8
		
		EPROM_mode(); //Guardar posiciones en EPROM o ejecutarla
 242:	0e 94 da 00 	call	0x1b4	; 0x1b4 <EPROM_mode>
		
		break;
 246:	08 95       	ret
		
		case 2:
		
		PORTC |= (1 << PORTC2); // Encender PC2
 248:	88 b1       	in	r24, 0x08	; 8
 24a:	84 60       	ori	r24, 0x04	; 4
 24c:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~( (1 << PORTC0)|( 1 << PORTC1) );	//Apagar PC0 y PC1
 24e:	88 b1       	in	r24, 0x08	; 8
 250:	8c 7f       	andi	r24, 0xFC	; 252
 252:	88 b9       	out	0x08, r24	; 8
		
		//Control desde adafruit
		
		break;
 254:	08 95       	ret
		
		default:
		
		 contador_modo = 0;  // Resetear el contador
 256:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <contador_modo>
 25a:	08 95       	ret

0000025c <main>:
// Main Function

int main(void)
{
	
	setup();
 25c:	0e 94 7c 00 	call	0xf8	; 0xf8 <setup>
	/* Replace with your application code */
	while (1)
	{
		
		display_menu(); 
 260:	0e 94 0a 01 	call	0x214	; 0x214 <display_menu>
 264:	fd cf       	rjmp	.-6      	; 0x260 <main+0x4>

00000266 <__vector_4>:
// Interrupt routines


//Rutina de interrupcion del PB3

ISR(PCINT1_vect){
 266:	1f 92       	push	r1
 268:	0f 92       	push	r0
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	0f 92       	push	r0
 26e:	11 24       	eor	r1, r1
 270:	8f 93       	push	r24
	
	if ( !(PINC & (1 << PINC3)))
 272:	33 99       	sbic	0x06, 3	; 6
 274:	05 c0       	rjmp	.+10     	; 0x280 <__vector_4+0x1a>
	{
		contador_modo++; // Cada que se precione el boton, incrementar el contador de modo.
 276:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <contador_modo>
 27a:	8f 5f       	subi	r24, 0xFF	; 255
 27c:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <contador_modo>
	
	//while (! (PIND & (1 << PINC3))); // Esperar a que se suelte el boton
	
	}
	
}
 280:	8f 91       	pop	r24
 282:	0f 90       	pop	r0
 284:	0f be       	out	0x3f, r0	; 63
 286:	0f 90       	pop	r0
 288:	1f 90       	pop	r1
 28a:	18 95       	reti

0000028c <TMR0_init_PWM>:
	//Esta función coloca el PWM en modo FAST y NO invertido automaticamente.
	//Las salidas del PWM del timer0 se encuentran en:
	
	// PD5 -- OC0A y PD6 -- OC0B 
	
	DDRD |= (1 << PD5) | (1 << PD6); //Declarar salidas del PWM del timer1 en PD5 y PD6
 28c:	2a b1       	in	r18, 0x0a	; 10
 28e:	20 66       	ori	r18, 0x60	; 96
 290:	2a b9       	out	0x0a, r18	; 10
	REFERENCIA PARA USO: El prescaler de 1024 y TCNT0 = 255  genera :
			Frecuencia = 61Hz
			Periodo: 0.0164s = 16.4ms
	*/
	
	TCCR0A = 0;	// Limpiar cualquier configuracion previa
 292:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0; // Limpiar cualquier configuración previa
 294:	15 bc       	out	0x25, r1	; 37
	
	TCCR0A |= (1 << COM0A1); // Colocar el modo FAST NO invertido
 296:	24 b5       	in	r18, 0x24	; 36
 298:	20 68       	ori	r18, 0x80	; 128
 29a:	24 bd       	out	0x24, r18	; 36
	TCCR0A |= (1 << COM0B1);
 29c:	24 b5       	in	r18, 0x24	; 36
 29e:	20 62       	ori	r18, 0x20	; 32
 2a0:	24 bd       	out	0x24, r18	; 36
	TCCR0A |= (1 << WGM01) | (1 << WGM00); // Colocar Fast PWM
 2a2:	24 b5       	in	r18, 0x24	; 36
 2a4:	23 60       	ori	r18, 0x03	; 3
 2a6:	24 bd       	out	0x24, r18	; 36
	TCCR0B &= ~(1 << WGM02) ;
 2a8:	25 b5       	in	r18, 0x25	; 37
 2aa:	27 7f       	andi	r18, 0xF7	; 247
 2ac:	25 bd       	out	0x25, r18	; 37
	
	switch (prescaler){
 2ae:	80 34       	cpi	r24, 0x40	; 64
 2b0:	91 05       	cpc	r25, r1
 2b2:	b9 f0       	breq	.+46     	; 0x2e2 <TMR0_init_PWM+0x56>
 2b4:	30 f4       	brcc	.+12     	; 0x2c2 <TMR0_init_PWM+0x36>
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	91 05       	cpc	r25, r1
 2ba:	59 f0       	breq	.+22     	; 0x2d2 <TMR0_init_PWM+0x46>
 2bc:	08 97       	sbiw	r24, 0x08	; 8
 2be:	69 f0       	breq	.+26     	; 0x2da <TMR0_init_PWM+0x4e>
 2c0:	1c c0       	rjmp	.+56     	; 0x2fa <TMR0_init_PWM+0x6e>
 2c2:	81 15       	cp	r24, r1
 2c4:	21 e0       	ldi	r18, 0x01	; 1
 2c6:	92 07       	cpc	r25, r18
 2c8:	81 f0       	breq	.+32     	; 0x2ea <TMR0_init_PWM+0x5e>
 2ca:	81 15       	cp	r24, r1
 2cc:	94 40       	sbci	r25, 0x04	; 4
 2ce:	89 f0       	breq	.+34     	; 0x2f2 <TMR0_init_PWM+0x66>
 2d0:	14 c0       	rjmp	.+40     	; 0x2fa <TMR0_init_PWM+0x6e>
		
		case 1:
		TCCR0B |= (1 << CS00); //No prescaler
 2d2:	85 b5       	in	r24, 0x25	; 37
 2d4:	81 60       	ori	r24, 0x01	; 1
 2d6:	85 bd       	out	0x25, r24	; 37
		break;
 2d8:	08 95       	ret
		
		case 8:
		TCCR0B |= (1 << CS01); // Prescaler de 8
 2da:	85 b5       	in	r24, 0x25	; 37
 2dc:	82 60       	ori	r24, 0x02	; 2
 2de:	85 bd       	out	0x25, r24	; 37
		break;
 2e0:	08 95       	ret
		
		case 64:
		TCCR0B |= (1 << CS01)|(1 << CS00); // Prescaler de 64
 2e2:	85 b5       	in	r24, 0x25	; 37
 2e4:	83 60       	ori	r24, 0x03	; 3
 2e6:	85 bd       	out	0x25, r24	; 37
		break;
 2e8:	08 95       	ret
		
		case 256:
		TCCR0B |= (1 << CS02); // Prescaler de 256
 2ea:	85 b5       	in	r24, 0x25	; 37
 2ec:	84 60       	ori	r24, 0x04	; 4
 2ee:	85 bd       	out	0x25, r24	; 37
		break;
 2f0:	08 95       	ret
		
		case 1024:
		TCCR0B |= (1 << CS02)|(1 << CS00); // Prescaler de 1024
 2f2:	85 b5       	in	r24, 0x25	; 37
 2f4:	85 60       	ori	r24, 0x05	; 5
 2f6:	85 bd       	out	0x25, r24	; 37
		break;
 2f8:	08 95       	ret
		
		default:
		TCCR0B |= (1 << CS02)|(1 << CS00); // El prescaler en caso defaul sera 1024
 2fa:	85 b5       	in	r24, 0x25	; 37
 2fc:	85 60       	ori	r24, 0x05	; 5
 2fe:	85 bd       	out	0x25, r24	; 37
 300:	08 95       	ret

00000302 <TMR1_init_PWM>:
	
		//Esta función coloca el PWM en modo FAST y NO invertido automaticamente.
		//Las salidas del PWM del timer1 se encuentran en:
		// PB1 -- OC1A y PB2 -- OC1B
		
	 DDRB |= (1 << PB1) | (1 << PB2);  // Pines 9 y 10 como salidas PWM del timer1
 302:	24 b1       	in	r18, 0x04	; 4
 304:	26 60       	ori	r18, 0x06	; 6
 306:	24 b9       	out	0x04, r18	; 4
	 
	 TCCR1A = 0;
 308:	e0 e8       	ldi	r30, 0x80	; 128
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	10 82       	st	Z, r1
	 TCCR1B = 0; // Borrar cualquier configuración previa de ambos registros
 30e:	a1 e8       	ldi	r26, 0x81	; 129
 310:	b0 e0       	ldi	r27, 0x00	; 0
 312:	1c 92       	st	X, r1
	 
	 TCCR1A |= (1 << COM1A1) | (1 << COM1B1); // Setear modo NO invertido
 314:	20 81       	ld	r18, Z
 316:	20 6a       	ori	r18, 0xA0	; 160
 318:	20 83       	st	Z, r18
	 TCCR1A |= (1 << WGM11);	//Setear modo FAST
 31a:	20 81       	ld	r18, Z
 31c:	22 60       	ori	r18, 0x02	; 2
 31e:	20 83       	st	Z, r18
	 TCCR1B |= (1 << WGM13) | (1 << WGM12); // Setear top en ICR1
 320:	2c 91       	ld	r18, X
 322:	28 61       	ori	r18, 0x18	; 24
 324:	2c 93       	st	X, r18
	 
	 switch (prescaler){
 326:	80 34       	cpi	r24, 0x40	; 64
 328:	91 05       	cpc	r25, r1
 32a:	d9 f0       	breq	.+54     	; 0x362 <TMR1_init_PWM+0x60>
 32c:	30 f4       	brcc	.+12     	; 0x33a <TMR1_init_PWM+0x38>
 32e:	81 30       	cpi	r24, 0x01	; 1
 330:	91 05       	cpc	r25, r1
 332:	59 f0       	breq	.+22     	; 0x34a <TMR1_init_PWM+0x48>
 334:	08 97       	sbiw	r24, 0x08	; 8
 336:	79 f0       	breq	.+30     	; 0x356 <TMR1_init_PWM+0x54>
 338:	26 c0       	rjmp	.+76     	; 0x386 <TMR1_init_PWM+0x84>
 33a:	81 15       	cp	r24, r1
 33c:	21 e0       	ldi	r18, 0x01	; 1
 33e:	92 07       	cpc	r25, r18
 340:	b1 f0       	breq	.+44     	; 0x36e <TMR1_init_PWM+0x6c>
 342:	81 15       	cp	r24, r1
 344:	94 40       	sbci	r25, 0x04	; 4
 346:	c9 f0       	breq	.+50     	; 0x37a <TMR1_init_PWM+0x78>
 348:	1e c0       	rjmp	.+60     	; 0x386 <TMR1_init_PWM+0x84>
		 
		 case 1:
		 TCCR1B |= (1 << CS10); // Prescaler  = 1
 34a:	e1 e8       	ldi	r30, 0x81	; 129
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	81 60       	ori	r24, 0x01	; 1
 352:	80 83       	st	Z, r24
		 break;
 354:	1d c0       	rjmp	.+58     	; 0x390 <TMR1_init_PWM+0x8e>
		 
		 case 8:
		 TCCR1B |= ( 1 << CS11); //Prescaler = 8
 356:	e1 e8       	ldi	r30, 0x81	; 129
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	82 60       	ori	r24, 0x02	; 2
 35e:	80 83       	st	Z, r24
		 break;
 360:	17 c0       	rjmp	.+46     	; 0x390 <TMR1_init_PWM+0x8e>
		 
		 case 64:
		 TCCR1B |= (1 << CS11) | (1 << CS10); //Prescaler de 64
 362:	e1 e8       	ldi	r30, 0x81	; 129
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	80 81       	ld	r24, Z
 368:	83 60       	ori	r24, 0x03	; 3
 36a:	80 83       	st	Z, r24
		 break;
 36c:	11 c0       	rjmp	.+34     	; 0x390 <TMR1_init_PWM+0x8e>
		 
		 case 256:
		 TCCR1B |= (1 << CS12);
 36e:	e1 e8       	ldi	r30, 0x81	; 129
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	80 81       	ld	r24, Z
 374:	84 60       	ori	r24, 0x04	; 4
 376:	80 83       	st	Z, r24
		 break;
 378:	0b c0       	rjmp	.+22     	; 0x390 <TMR1_init_PWM+0x8e>
		 
		 case 1024:
		 TCCR1B |= ( 1 << CS12) | (1 << CS10); // Prescaler de 1024
 37a:	e1 e8       	ldi	r30, 0x81	; 129
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	85 60       	ori	r24, 0x05	; 5
 382:	80 83       	st	Z, r24
		 break;
 384:	05 c0       	rjmp	.+10     	; 0x390 <TMR1_init_PWM+0x8e>
		 
		 default:
		 TCCR1B |= ( 1 << CS12) | (1 << CS10); // Prescaler de 1024 por default
 386:	e1 e8       	ldi	r30, 0x81	; 129
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	85 60       	ori	r24, 0x05	; 5
 38e:	80 83       	st	Z, r24
		 
	 }
	   
	 ICR1 = ICR1_value; // Configura el TOP de la función  
 390:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 394:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 398:	08 95       	ret

0000039a <UART_init>:

void UART_init(void){
	
	//Paso 1: configurar PD0 como entrada y PD1 como salida
	
	DDRD |= (1 << DDD1); // Tx SALIDA
 39a:	8a b1       	in	r24, 0x0a	; 10
 39c:	82 60       	ori	r24, 0x02	; 2
 39e:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << DDD0); // RX ENTRADA
 3a0:	8a b1       	in	r24, 0x0a	; 10
 3a2:	8e 7f       	andi	r24, 0xFE	; 254
 3a4:	8a b9       	out	0x0a, r24	; 10
	
	
	//Paso 2: configurar UCSR0A
	
	UCSR0A = 0;
 3a6:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	//Paso 3: Configurar UCSR0B: Interrupciones de RX
	
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
 3aa:	88 e9       	ldi	r24, 0x98	; 152
 3ac:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	// paso 4 configurar UCSR0C:  Configurar modo asincrono; desahbilitar polaridad
	
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 3b0:	86 e0       	ldi	r24, 0x06	; 6
 3b2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	// Paso 5 Habilitar interrupciones
	
	
	
	
	UBRR0  = 103; // 103 --> implica 9600 baundrys si el reloj funciona a 16Mhz.
 3b6:	87 e6       	ldi	r24, 0x67	; 103
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 3be:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 3c2:	08 95       	ret

000003c4 <UART_send_char>:

void UART_send_char(char caracter){
	
	//Función que envia un caracter a la computadora
	
	while (!(UCSR0A & (1 << UDRE0))); //Esperar hasta que la transmición termine
 3c4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 3c8:	95 ff       	sbrs	r25, 5
 3ca:	fc cf       	rjmp	.-8      	; 0x3c4 <UART_send_char>
	
	UDR0 = caracter ; // Cargar el caracter a enviar.
 3cc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 3d0:	08 95       	ret

000003d2 <UART_receive_char>:
}


char UART_receive_char (void){
	
	cli();  // Desabilitar interrupciones
 3d2:	f8 94       	cli
	while (!(UCSR0A & (1 << RXC0))); // Esperar a que termine la transmición/recepción
 3d4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 3d8:	88 23       	and	r24, r24
 3da:	e4 f7       	brge	.-8      	; 0x3d4 <UART_receive_char+0x2>
	
	
	sei(); // habilitar interrupciones
 3dc:	78 94       	sei
	return UDR0; // Devolver el dato recibido :)
 3de:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 3e2:	08 95       	ret

000003e4 <UART_send_chain>:


void UART_send_chain (char* chain){
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	ec 01       	movw	r28, r24
	
	//Recorrer toda la cadena. Se detiene hasta encontrar el caracter nulo
	
	for (; *chain; chain++) {
 3ea:	03 c0       	rjmp	.+6      	; 0x3f2 <UART_send_chain+0xe>
		UART_send_char(*chain);
 3ec:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <UART_send_char>

void UART_send_chain (char* chain){
	
	//Recorrer toda la cadena. Se detiene hasta encontrar el caracter nulo
	
	for (; *chain; chain++) {
 3f0:	21 96       	adiw	r28, 0x01	; 1
 3f2:	88 81       	ld	r24, Y
 3f4:	81 11       	cpse	r24, r1
 3f6:	fa cf       	rjmp	.-12     	; 0x3ec <UART_send_chain+0x8>
		UART_send_char(*chain);
		
	}
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	08 95       	ret

000003fe <__divmodhi4>:
 3fe:	97 fb       	bst	r25, 7
 400:	07 2e       	mov	r0, r23
 402:	16 f4       	brtc	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 404:	00 94       	com	r0
 406:	07 d0       	rcall	.+14     	; 0x416 <__divmodhi4_neg1>
 408:	77 fd       	sbrc	r23, 7
 40a:	09 d0       	rcall	.+18     	; 0x41e <__divmodhi4_neg2>
 40c:	0e 94 13 02 	call	0x426	; 0x426 <__udivmodhi4>
 410:	07 fc       	sbrc	r0, 7
 412:	05 d0       	rcall	.+10     	; 0x41e <__divmodhi4_neg2>
 414:	3e f4       	brtc	.+14     	; 0x424 <__divmodhi4_exit>

00000416 <__divmodhi4_neg1>:
 416:	90 95       	com	r25
 418:	81 95       	neg	r24
 41a:	9f 4f       	sbci	r25, 0xFF	; 255
 41c:	08 95       	ret

0000041e <__divmodhi4_neg2>:
 41e:	70 95       	com	r23
 420:	61 95       	neg	r22
 422:	7f 4f       	sbci	r23, 0xFF	; 255

00000424 <__divmodhi4_exit>:
 424:	08 95       	ret

00000426 <__udivmodhi4>:
 426:	aa 1b       	sub	r26, r26
 428:	bb 1b       	sub	r27, r27
 42a:	51 e1       	ldi	r21, 0x11	; 17
 42c:	07 c0       	rjmp	.+14     	; 0x43c <__udivmodhi4_ep>

0000042e <__udivmodhi4_loop>:
 42e:	aa 1f       	adc	r26, r26
 430:	bb 1f       	adc	r27, r27
 432:	a6 17       	cp	r26, r22
 434:	b7 07       	cpc	r27, r23
 436:	10 f0       	brcs	.+4      	; 0x43c <__udivmodhi4_ep>
 438:	a6 1b       	sub	r26, r22
 43a:	b7 0b       	sbc	r27, r23

0000043c <__udivmodhi4_ep>:
 43c:	88 1f       	adc	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	5a 95       	dec	r21
 442:	a9 f7       	brne	.-22     	; 0x42e <__udivmodhi4_loop>
 444:	80 95       	com	r24
 446:	90 95       	com	r25
 448:	bc 01       	movw	r22, r24
 44a:	cd 01       	movw	r24, r26
 44c:	08 95       	ret

0000044e <_exit>:
 44e:	f8 94       	cli

00000450 <__stop_program>:
 450:	ff cf       	rjmp	.-2      	; 0x450 <__stop_program>
