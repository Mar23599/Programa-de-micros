
Proyecto_2_version2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000059e  00000632  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000059e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  0080010a  0080010a  0000063c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000066c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  000006b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000110e  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000996  00000000  00000000  0000194e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b1e  00000000  00000000  000022e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  00002e04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005eb  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002cd  00000000  00000000  0000361f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000038ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 af 01 	jmp	0x35e	; 0x35e <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 c2 01 	jmp	0x384	; 0x384 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e9       	ldi	r30, 0x9E	; 158
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 32       	cpi	r26, 0x2A	; 42
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 aa 01 	call	0x354	; 0x354 <main>
  9e:	0c 94 cd 02 	jmp	0x59a	; 0x59a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:
void adc_init(void) {
	// Configuración del ADC:
	// - Referencia AVcc (REFS0=1)
	// - Justificado a izquierda (ADLAR=1) para leer solo ADCH
	// - Prescaler de 128 (125kHz @ 16MHz)
	ADMUX = (1 << REFS0) | (1 << ADLAR);
  a6:	80 e6       	ldi	r24, 0x60	; 96
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	
	// Habilitar ADC con prescaler de 128
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b2:	08 95       	ret

000000b4 <adc_read>:
}

uint8_t adc_read(uint8_t channel) {
	// Seleccionar canal (0-7) manteniendo la configuración existente
	ADMUX = (ADMUX & 0xF0) | (channel & 0x07);
  b4:	ec e7       	ldi	r30, 0x7C	; 124
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	90 81       	ld	r25, Z
  ba:	90 7f       	andi	r25, 0xF0	; 240
  bc:	87 70       	andi	r24, 0x07	; 7
  be:	89 2b       	or	r24, r25
  c0:	80 83       	st	Z, r24
	
	// Iniciar conversión
	ADCSRA |= (1 << ADSC);
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	80 83       	st	Z, r24
	
	// Esperar fin de conversión
	while (ADCSRA & (1 << ADSC));
  cc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  d0:	86 fd       	sbrc	r24, 6
  d2:	fc cf       	rjmp	.-8      	; 0xcc <adc_read+0x18>
	
	// Retornar solo ADCH (8 bits superiores, gracias a ADLAR=1)
	return ADCH;
  d4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  d8:	08 95       	ret

000000da <constrain>:



// Función para limitar valores dentro de un rango
static uint8_t constrain(uint8_t value, uint8_t min, uint8_t max) {
	if(value < min) return min;
  da:	86 17       	cp	r24, r22
  dc:	20 f0       	brcs	.+8      	; 0xe6 <constrain+0xc>
	if(value > max) return max;
  de:	48 17       	cp	r20, r24
  e0:	18 f4       	brcc	.+6      	; 0xe8 <constrain+0xe>
  e2:	84 2f       	mov	r24, r20
  e4:	08 95       	ret



// Función para limitar valores dentro de un rango
static uint8_t constrain(uint8_t value, uint8_t min, uint8_t max) {
	if(value < min) return min;
  e6:	86 2f       	mov	r24, r22
	if(value > max) return max;
	return value;
}
  e8:	08 95       	ret

000000ea <PWM_init_Timer0>:

void PWM_init_Timer0() {
	DDRD |= (1 << PD6) | (1 << PD5); // Pines OC0A y OC0B como salida
  ea:	8a b1       	in	r24, 0x0a	; 10
  ec:	80 66       	ori	r24, 0x60	; 96
  ee:	8a b9       	out	0x0a, r24	; 10
	TCCR0A = (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);
  f0:	83 ea       	ldi	r24, 0xA3	; 163
  f2:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS02) | (1 << CS00); // Prescaler 1024
  f4:	85 e0       	ldi	r24, 0x05	; 5
  f6:	85 bd       	out	0x25, r24	; 37
  f8:	08 95       	ret

000000fa <PWM_init_Timer1>:
}

void PWM_init_Timer1(uint16_t ICR1_v) {
  fa:	9c 01       	movw	r18, r24
	DDRB |= (1 << PB1) | (1 << PB2);
  fc:	94 b1       	in	r25, 0x04	; 4
  fe:	96 60       	ori	r25, 0x06	; 6
 100:	94 b9       	out	0x04, r25	; 4
	
	// Configurar modo Fast PWM con ICR1 como TOP (Modo 14)
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);
 102:	82 ea       	ldi	r24, 0xA2	; 162
 104:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS12) | (1 << CS10);
 108:	8d e1       	ldi	r24, 0x1D	; 29
 10a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	// Establecer el valor de TOP (define el período PWM)
	ICR1 = ICR1_v;
 10e:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 112:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 116:	08 95       	ret

00000118 <PWM_calculate_servo_8bit>:
}

uint8_t PWM_calculate_servo_8bit(uint8_t value) {
	// Asegurar que el valor está en rango 0-255
	value = constrain(value, 0, 255);
 118:	4f ef       	ldi	r20, 0xFF	; 255
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	0e 94 6d 00 	call	0xda	; 0xda <constrain>
	
	// Mapear 0-255 a 8-39 (para pulso de 0.5ms a 2.5ms)
	// Fórmula: output = 8 + (value / 255.0) * (39 - 8)
	return (uint8_t)(8 + (value * 31) / 255);
 120:	2f e1       	ldi	r18, 0x1F	; 31
 122:	82 9f       	mul	r24, r18
 124:	c0 01       	movw	r24, r0
 126:	11 24       	eor	r1, r1
 128:	6f ef       	ldi	r22, 0xFF	; 255
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	0e 94 6e 02 	call	0x4dc	; 0x4dc <__divmodhi4>
}
 130:	88 e0       	ldi	r24, 0x08	; 8
 132:	86 0f       	add	r24, r22
 134:	08 95       	ret

00000136 <PWM_calculate_servo_16bit>:

uint16_t PWM_calculate_servo_16bit(uint8_t value) {
	// Asegurar que el valor está en rango 0-255
	value = constrain(value, 0, 255);
 136:	4f ef       	ldi	r20, 0xFF	; 255
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	0e 94 6d 00 	call	0xda	; 0xda <constrain>
	
	// Mapear 0-255 a 2000-10000 (para pulso de 0.5ms a 2.5ms en modo 16-bit)
	// Fórmula: output = 2000 + (value / 255.0) * (10000 - 2000)
	return (uint16_t)(16 + ((value * 15 + 127) / 255)); 
 13e:	2f e0       	ldi	r18, 0x0F	; 15
 140:	82 9f       	mul	r24, r18
 142:	c0 01       	movw	r24, r0
 144:	11 24       	eor	r1, r1
 146:	81 58       	subi	r24, 0x81	; 129
 148:	9f 4f       	sbci	r25, 0xFF	; 255
 14a:	6f ef       	ldi	r22, 0xFF	; 255
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <__divmodhi4>
}
 152:	cb 01       	movw	r24, r22
 154:	40 96       	adiw	r24, 0x10	; 16
 156:	08 95       	ret

00000158 <setup>:
// NON-Interrupt subroutines


void setup(){
	
	cli();
 158:	f8 94       	cli
	
	DDRC = 0b00000111; // Declarar Pines de entrada y salida.
 15a:	87 e0       	ldi	r24, 0x07	; 7
 15c:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PORTC3); // Activar pull-up interno en el PB3
 15e:	88 b1       	in	r24, 0x08	; 8
 160:	88 60       	ori	r24, 0x08	; 8
 162:	88 b9       	out	0x08, r24	; 8
	
	// Configuración de interrupciones por cambios en PC3
	
	PCICR |= (1 << PCIE1); // Habilitar Interrupciones en Puerto C
 164:	e8 e6       	ldi	r30, 0x68	; 104
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	82 60       	ori	r24, 0x02	; 2
 16c:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT11); // habilitar interrupciones para PC3
 16e:	ec e6       	ldi	r30, 0x6C	; 108
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	88 60       	ori	r24, 0x08	; 8
 176:	80 83       	st	Z, r24
	
	
	adc_init(); //inicializar ADC
 178:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>
	PWM_init_Timer0(); // Inicializar PWM con el timer0: 61hz-16ms
 17c:	0e 94 75 00 	call	0xea	; 0xea <PWM_init_Timer0>
	PWM_init_Timer1(312); // Inicializar PWM con el timer1 50hz - 20ms
 180:	88 e3       	ldi	r24, 0x38	; 56
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	0e 94 7d 00 	call	0xfa	; 0xfa <PWM_init_Timer1>
	
	// Inicializacion del UART
	
	 UART_init_with_interrupts();
 188:	0e 94 62 02 	call	0x4c4	; 0x4c4 <UART_init_with_interrupts>
	
	sei();
 18c:	78 94       	sei
 18e:	08 95       	ret

00000190 <control_manual>:

void control_manual(){
	
	//Funcion que controla los servos desde potenciometros
	
	OCR1B =	PWM_calculate_servo_16bit(	adc_read(7)	); // Funciona por medio del canal 7
 190:	87 e0       	ldi	r24, 0x07	; 7
 192:	0e 94 5a 00 	call	0xb4	; 0xb4 <adc_read>
 196:	0e 94 9b 00 	call	0x136	; 0x136 <PWM_calculate_servo_16bit>
 19a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 19e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	OCR1A =	PWM_calculate_servo_16bit(	adc_read(6)	); // Funciona por medio del canal 6
 1a2:	86 e0       	ldi	r24, 0x06	; 6
 1a4:	0e 94 5a 00 	call	0xb4	; 0xb4 <adc_read>
 1a8:	0e 94 9b 00 	call	0x136	; 0x136 <PWM_calculate_servo_16bit>
 1ac:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1b0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	OCR0A = PWM_calculate_servo_8bit(	adc_read(5)	); // Funciona por medio del canal 5
 1b4:	85 e0       	ldi	r24, 0x05	; 5
 1b6:	0e 94 5a 00 	call	0xb4	; 0xb4 <adc_read>
 1ba:	0e 94 8c 00 	call	0x118	; 0x118 <PWM_calculate_servo_8bit>
 1be:	87 bd       	out	0x27, r24	; 39
	OCR0B = PWM_calculate_servo_8bit(	adc_read(4)	); // Funciona por medio del canal 4
 1c0:	84 e0       	ldi	r24, 0x04	; 4
 1c2:	0e 94 5a 00 	call	0xb4	; 0xb4 <adc_read>
 1c6:	0e 94 8c 00 	call	0x118	; 0x118 <PWM_calculate_servo_8bit>
 1ca:	88 bd       	out	0x28, r24	; 40
 1cc:	08 95       	ret

000001ce <guardar_posiciones>:
	
}

void guardar_posiciones(){
	
	data_1 = OCR1B;
 1ce:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 1d2:	70 91 8b 00 	lds	r23, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1d6:	70 93 28 01 	sts	0x0128, r23	; 0x800128 <data_1+0x1>
 1da:	60 93 27 01 	sts	0x0127, r22	; 0x800127 <data_1>
	data_2 = OCR1A;
 1de:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1e2:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1e6:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <data_2+0x1>
 1ea:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <data_2>
	data_3 = OCR0A;
 1ee:	87 b5       	in	r24, 0x27	; 39
 1f0:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <data_3>
	data_4 = OCR0B;
 1f4:	88 b5       	in	r24, 0x28	; 40
 1f6:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <data_4>
	
	
	 eeprom_write_word((uint16_t*)ADDR_data1, data_1);
 1fa:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <ADDR_data1>
 1fe:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <ADDR_data1+0x1>
 202:	0e 94 b8 02 	call	0x570	; 0x570 <eeprom_write_word>
	 eeprom_write_word((uint16_t*)ADDR_data2, data_2);
 206:	60 91 23 01 	lds	r22, 0x0123	; 0x800123 <data_2>
 20a:	70 91 24 01 	lds	r23, 0x0124	; 0x800124 <data_2+0x1>
 20e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ADDR_data2>
 212:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <ADDR_data2+0x1>
 216:	0e 94 b8 02 	call	0x570	; 0x570 <eeprom_write_word>
	 eeprom_write_byte((uint8_t*)ADDR_data3, data_3);
 21a:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <data_3>
 21e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ADDR_data3>
 222:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ADDR_data3+0x1>
 226:	0e 94 aa 02 	call	0x554	; 0x554 <eeprom_write_byte>
	 eeprom_write_byte((uint8_t*)ADDR_data4, data_4);
 22a:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <data_4>
 22e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 232:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 236:	0e 94 aa 02 	call	0x554	; 0x554 <eeprom_write_byte>
 23a:	08 95       	ret

0000023c <ver_posiciones>:
	
}	

void ver_posiciones(){
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
	
	w_data_1 = eeprom_read_word(	(const uint16_t*)ADDR_data1	); //Leer datos
 240:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <ADDR_data1>
 244:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <ADDR_data1+0x1>
 248:	0e 94 a4 02 	call	0x548	; 0x548 <eeprom_read_word>
 24c:	ec 01       	movw	r28, r24
 24e:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <w_data_1+0x1>
 252:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <w_data_1>
	w_data_2 = eeprom_read_word(	(const uint16_t*)ADDR_data2	);
 256:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ADDR_data2>
 25a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <ADDR_data2+0x1>
 25e:	0e 94 a4 02 	call	0x548	; 0x548 <eeprom_read_word>
 262:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <w_data_2+0x1>
 266:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <w_data_2>
	w_data_3 = eeprom_read_word(	(const uint16_t*)ADDR_data3	);
 26a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ADDR_data3>
 26e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ADDR_data3+0x1>
 272:	0e 94 a4 02 	call	0x548	; 0x548 <eeprom_read_word>
 276:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <w_data_3>
	w_data_4 = eeprom_read_word(	(const uint16_t*)ADDR_data4	);
 27a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 27e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 282:	0e 94 a4 02 	call	0x548	; 0x548 <eeprom_read_word>
 286:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <w_data_4>
	
	OCR1B = w_data_1; // Ejecutar esos datos en los servos
 28a:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 28e:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	OCR1A = w_data_2;
 292:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <w_data_2>
 296:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <w_data_2+0x1>
 29a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 29e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	OCR0A = w_data_3;
 2a2:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <w_data_3>
 2a6:	87 bd       	out	0x27, r24	; 39
	OCR0B = w_data_4;
 2a8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <w_data_4>
 2ac:	88 bd       	out	0x28, r24	; 40
	
}
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	08 95       	ret

000002b4 <control_EPROM>:
{
	
	
	
	
	switch (opcion)
 2b4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <opcion>
 2b8:	81 33       	cpi	r24, 0x31	; 49
 2ba:	19 f0       	breq	.+6      	; 0x2c2 <control_EPROM+0xe>
 2bc:	82 33       	cpi	r24, 0x32	; 50
 2be:	21 f0       	breq	.+8      	; 0x2c8 <control_EPROM+0x14>
 2c0:	08 95       	ret
		{
		
		case '1':
		
		
		guardar_posiciones(); // Funcion que guarda posiciones
 2c2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <guardar_posiciones>
		
		
		break;
 2c6:	08 95       	ret
		
		case '2':
		
		ver_posiciones(); // Funcion que muestra posiciones guardadas
 2c8:	0e 94 1e 01 	call	0x23c	; 0x23c <ver_posiciones>
 2cc:	08 95       	ret

000002ce <control_cloud>:
	OCR0B = w_data_4;
	
}


void control_cloud(){
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
	
	OCR1B = PWM_calculate_servo_16bit(	servo_data[0]	);// Ejecutar datos desde la nube
 2d2:	c6 e1       	ldi	r28, 0x16	; 22
 2d4:	d1 e0       	ldi	r29, 0x01	; 1
 2d6:	88 81       	ld	r24, Y
 2d8:	0e 94 9b 00 	call	0x136	; 0x136 <PWM_calculate_servo_16bit>
 2dc:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 2e0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	OCR1A = PWM_calculate_servo_16bit(	servo_data[1]	);
 2e4:	89 81       	ldd	r24, Y+1	; 0x01
 2e6:	0e 94 9b 00 	call	0x136	; 0x136 <PWM_calculate_servo_16bit>
 2ea:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2ee:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	OCR0A = PWM_calculate_servo_8bit(	servo_data[2]	);
 2f2:	8a 81       	ldd	r24, Y+2	; 0x02
 2f4:	0e 94 8c 00 	call	0x118	; 0x118 <PWM_calculate_servo_8bit>
 2f8:	87 bd       	out	0x27, r24	; 39
	OCR0B = PWM_calculate_servo_8bit(	servo_data[3]	);
 2fa:	8b 81       	ldd	r24, Y+3	; 0x03
 2fc:	0e 94 8c 00 	call	0x118	; 0x118 <PWM_calculate_servo_8bit>
 300:	88 bd       	out	0x28, r24	; 40
	
	
}
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <modo>:
void modo()
{
	

	
	switch (contador_modo)
 308:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <contador_modo>
 30c:	81 30       	cpi	r24, 0x01	; 1
 30e:	69 f0       	breq	.+26     	; 0x32a <modo+0x22>
 310:	18 f0       	brcs	.+6      	; 0x318 <modo+0x10>
 312:	82 30       	cpi	r24, 0x02	; 2
 314:	99 f0       	breq	.+38     	; 0x33c <modo+0x34>
 316:	1b c0       	rjmp	.+54     	; 0x34e <modo+0x46>
		{
		
		case 0:
		PORTC |= (1 << 0);
 318:	88 b1       	in	r24, 0x08	; 8
 31a:	81 60       	ori	r24, 0x01	; 1
 31c:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~((1 << 1)|(1 << 2));
 31e:	88 b1       	in	r24, 0x08	; 8
 320:	89 7f       	andi	r24, 0xF9	; 249
 322:	88 b9       	out	0x08, r24	; 8
		
		control_manual();
 324:	0e 94 c8 00 	call	0x190	; 0x190 <control_manual>
		
		
		break;
 328:	08 95       	ret
		
		case 1:
		PORTC |= (1 << 1);
 32a:	88 b1       	in	r24, 0x08	; 8
 32c:	82 60       	ori	r24, 0x02	; 2
 32e:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~((1 << 0)|(1 << 2));
 330:	88 b1       	in	r24, 0x08	; 8
 332:	8a 7f       	andi	r24, 0xFA	; 250
 334:	88 b9       	out	0x08, r24	; 8
		
		
		control_EPROM();
 336:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <control_EPROM>
		
		break;
 33a:	08 95       	ret
		
		case 2:
		PORTC |= (1 << 2);
 33c:	88 b1       	in	r24, 0x08	; 8
 33e:	84 60       	ori	r24, 0x04	; 4
 340:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~((1 << 0)|(1 << 1));
 342:	88 b1       	in	r24, 0x08	; 8
 344:	8c 7f       	andi	r24, 0xFC	; 252
 346:	88 b9       	out	0x08, r24	; 8
		
		
		control_cloud();
 348:	0e 94 67 01 	call	0x2ce	; 0x2ce <control_cloud>
		
		break;
 34c:	08 95       	ret
		
		default:
		
		contador_modo = 0;
 34e:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <contador_modo>
 352:	08 95       	ret

00000354 <main>:

/****************************************/
// Main Function

int main(void) {
	setup();
 354:	0e 94 ac 00 	call	0x158	; 0x158 <setup>
	
	while(1) {
		
		modo();
 358:	0e 94 84 01 	call	0x308	; 0x308 <modo>
 35c:	fd cf       	rjmp	.-6      	; 0x358 <main+0x4>

0000035e <__vector_4>:


/****************************************/
// Interrupt routines

ISR(PCINT1_vect){
 35e:	1f 92       	push	r1
 360:	0f 92       	push	r0
 362:	0f b6       	in	r0, 0x3f	; 63
 364:	0f 92       	push	r0
 366:	11 24       	eor	r1, r1
 368:	8f 93       	push	r24
	
	
	
	
	if (	!(PINC & (1 << 3))	)
 36a:	33 99       	sbic	0x06, 3	; 6
 36c:	05 c0       	rjmp	.+10     	; 0x378 <__vector_4+0x1a>
	{
		contador_modo++; //Cuando se presione el boton, cambiar de modo
 36e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <contador_modo>
 372:	8f 5f       	subi	r24, 0xFF	; 255
 374:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <contador_modo>
	}
	
	
}
 378:	8f 91       	pop	r24
 37a:	0f 90       	pop	r0
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	0f 90       	pop	r0
 380:	1f 90       	pop	r1
 382:	18 95       	reti

00000384 <__vector_18>:

ISR(USART_RX_vect){
 384:	1f 92       	push	r1
 386:	0f 92       	push	r0
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	0f 92       	push	r0
 38c:	11 24       	eor	r1, r1
 38e:	2f 93       	push	r18
 390:	3f 93       	push	r19
 392:	4f 93       	push	r20
 394:	5f 93       	push	r21
 396:	6f 93       	push	r22
 398:	7f 93       	push	r23
 39a:	8f 93       	push	r24
 39c:	9f 93       	push	r25
 39e:	af 93       	push	r26
 3a0:	bf 93       	push	r27
 3a2:	cf 93       	push	r28
 3a4:	ef 93       	push	r30
 3a6:	ff 93       	push	r31
	static char rx_msg[8]; // Buffer para mensaje
	static uint8_t msg_pos = 0;
	static uint8_t expecting_value = 0;
	static uint8_t target_servo = 0;
	
	char c = UDR0; // Leer dato recibido
 3a8:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	// Protección contra desbordamiento
	if(msg_pos >= sizeof(rx_msg)-1) {
 3ac:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <msg_pos.1988>
 3b0:	e7 30       	cpi	r30, 0x07	; 7
 3b2:	28 f0       	brcs	.+10     	; 0x3be <__vector_18+0x3a>
		msg_pos = 0;
 3b4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <msg_pos.1988>
		expecting_value = 0;
 3b8:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <expecting_value.1989>
		return;
 3bc:	71 c0       	rjmp	.+226    	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
	}
	
	if (contador_modo == 1) { // Modo EPROM
 3be:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <contador_modo>
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	a1 f5       	brne	.+104    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
		if (msg_pos < 3) {
 3c6:	e3 30       	cpi	r30, 0x03	; 3
 3c8:	18 f5       	brcc	.+70     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
			rx_msg[msg_pos++] = c;
 3ca:	c1 e0       	ldi	r28, 0x01	; 1
 3cc:	ce 0f       	add	r28, r30
 3ce:	c0 93 14 01 	sts	0x0114, r28	; 0x800114 <msg_pos.1988>
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	e5 5f       	subi	r30, 0xF5	; 245
 3d6:	fe 4f       	sbci	r31, 0xFE	; 254
 3d8:	90 83       	st	Z, r25
			rx_msg[msg_pos] = '\0';
 3da:	ec 2f       	mov	r30, r28
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	e5 5f       	subi	r30, 0xF5	; 245
 3e0:	fe 4f       	sbci	r31, 0xFE	; 254
 3e2:	10 82       	st	Z, r1
			
			// Verificar si es "EP:"
			if (msg_pos == 3 && strncmp(rx_msg, "EP:", 3) == 0) {
 3e4:	c3 30       	cpi	r28, 0x03	; 3
 3e6:	71 f4       	brne	.+28     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3e8:	43 e0       	ldi	r20, 0x03	; 3
 3ea:	50 e0       	ldi	r21, 0x00	; 0
 3ec:	66 e0       	ldi	r22, 0x06	; 6
 3ee:	71 e0       	ldi	r23, 0x01	; 1
 3f0:	8b e0       	ldi	r24, 0x0B	; 11
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	0e 94 96 02 	call	0x52c	; 0x52c <strncmp>
 3f8:	89 2b       	or	r24, r25
 3fa:	21 f4       	brne	.+8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
				expecting_value = 1;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <expecting_value.1989>
 402:	4e c0       	rjmp	.+156    	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
				} else if (msg_pos == 3) {
 404:	c3 30       	cpi	r28, 0x03	; 3
 406:	09 f0       	breq	.+2      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 408:	4b c0       	rjmp	.+150    	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
				msg_pos = 0; // Reset si no coincide
 40a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <msg_pos.1988>
 40e:	48 c0       	rjmp	.+144    	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
			}
		}
		else if (expecting_value) {
 410:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <expecting_value.1989>
 414:	88 23       	and	r24, r24
 416:	09 f4       	brne	.+2      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 418:	43 c0       	rjmp	.+134    	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
			opcion = c; // Guarda el caracter directamente
 41a:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <opcion>
			eprom_data_ready = 1;
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <eprom_data_ready>
			msg_pos = 0;
 424:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <msg_pos.1988>
			expecting_value = 0;
 428:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <expecting_value.1989>
 42c:	39 c0       	rjmp	.+114    	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
		}
	}
	else if (contador_modo == 2) { // Modo Servos
 42e:	82 30       	cpi	r24, 0x02	; 2
 430:	b9 f5       	brne	.+110    	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
		if (msg_pos < 3) {
 432:	e3 30       	cpi	r30, 0x03	; 3
 434:	38 f5       	brcc	.+78     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
			rx_msg[msg_pos++] = c;
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	8e 0f       	add	r24, r30
 43a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <msg_pos.1988>
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	e5 5f       	subi	r30, 0xF5	; 245
 442:	fe 4f       	sbci	r31, 0xFE	; 254
 444:	90 83       	st	Z, r25
			rx_msg[msg_pos] = '\0';
 446:	e8 2f       	mov	r30, r24
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	e5 5f       	subi	r30, 0xF5	; 245
 44c:	fe 4f       	sbci	r31, 0xFE	; 254
 44e:	10 82       	st	Z, r1
			
			// Verificar si es "S1:", "S2:", etc.
			if (msg_pos == 3 && rx_msg[0] == 'S' &&
 450:	83 30       	cpi	r24, 0x03	; 3
 452:	99 f4       	brne	.+38     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 454:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <rx_msg.1987>
 458:	93 35       	cpi	r25, 0x53	; 83
 45a:	79 f4       	brne	.+30     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
			(rx_msg[1] >= '1' && rx_msg[1] <= '4') &&
 45c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <rx_msg.1987+0x1>
 460:	91 53       	subi	r25, 0x31	; 49
		if (msg_pos < 3) {
			rx_msg[msg_pos++] = c;
			rx_msg[msg_pos] = '\0';
			
			// Verificar si es "S1:", "S2:", etc.
			if (msg_pos == 3 && rx_msg[0] == 'S' &&
 462:	94 30       	cpi	r25, 0x04	; 4
 464:	50 f4       	brcc	.+20     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
			(rx_msg[1] >= '1' && rx_msg[1] <= '4') &&
			rx_msg[2] == ':') {
 466:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <rx_msg.1987+0x2>
			rx_msg[msg_pos++] = c;
			rx_msg[msg_pos] = '\0';
			
			// Verificar si es "S1:", "S2:", etc.
			if (msg_pos == 3 && rx_msg[0] == 'S' &&
			(rx_msg[1] >= '1' && rx_msg[1] <= '4') &&
 46a:	2a 33       	cpi	r18, 0x3A	; 58
 46c:	31 f4       	brne	.+12     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
			rx_msg[2] == ':') {
				target_servo = rx_msg[1] - '1'; // Convertir a índice 0-3
 46e:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <__data_end>
				expecting_value = 1;
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <expecting_value.1989>
 478:	13 c0       	rjmp	.+38     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
				} else if (msg_pos == 3) {
 47a:	83 30       	cpi	r24, 0x03	; 3
 47c:	89 f4       	brne	.+34     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
				msg_pos = 0; // Reset si no coincide
 47e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <msg_pos.1988>
 482:	0e c0       	rjmp	.+28     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
			}
		}
		else if (expecting_value) {
 484:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <expecting_value.1989>
 488:	88 23       	and	r24, r24
 48a:	51 f0       	breq	.+20     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
			servo_data[target_servo] = (uint8_t)c;
 48c:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	ea 5e       	subi	r30, 0xEA	; 234
 494:	fe 4f       	sbci	r31, 0xFE	; 254
 496:	90 83       	st	Z, r25
			msg_pos = 0;
 498:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <msg_pos.1988>
			expecting_value = 0;
 49c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <expecting_value.1989>
		}
	}
	
	
}
 4a0:	ff 91       	pop	r31
 4a2:	ef 91       	pop	r30
 4a4:	cf 91       	pop	r28
 4a6:	bf 91       	pop	r27
 4a8:	af 91       	pop	r26
 4aa:	9f 91       	pop	r25
 4ac:	8f 91       	pop	r24
 4ae:	7f 91       	pop	r23
 4b0:	6f 91       	pop	r22
 4b2:	5f 91       	pop	r21
 4b4:	4f 91       	pop	r20
 4b6:	3f 91       	pop	r19
 4b8:	2f 91       	pop	r18
 4ba:	0f 90       	pop	r0
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	0f 90       	pop	r0
 4c0:	1f 90       	pop	r1
 4c2:	18 95       	reti

000004c4 <UART_init_with_interrupts>:
	}
}

void UART_init_with_interrupts() {
	// Configuración del baud rate
	UBRR0H = (unsigned char)(BAUD_PRESCALLER>>8);
 4c4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)BAUD_PRESCALLER;
 4c8:	87 e6       	ldi	r24, 0x67	; 103
 4ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Habilita receptor y transmisor + interrupción por recepción
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
 4ce:	88 e9       	ldi	r24, 0x98	; 152
 4d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	// Configura formato: 8 bits de datos, 1 bit de parada
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
 4d4:	86 e0       	ldi	r24, 0x06	; 6
 4d6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 4da:	08 95       	ret

000004dc <__divmodhi4>:
 4dc:	97 fb       	bst	r25, 7
 4de:	07 2e       	mov	r0, r23
 4e0:	16 f4       	brtc	.+4      	; 0x4e6 <__divmodhi4+0xa>
 4e2:	00 94       	com	r0
 4e4:	07 d0       	rcall	.+14     	; 0x4f4 <__divmodhi4_neg1>
 4e6:	77 fd       	sbrc	r23, 7
 4e8:	09 d0       	rcall	.+18     	; 0x4fc <__divmodhi4_neg2>
 4ea:	0e 94 82 02 	call	0x504	; 0x504 <__udivmodhi4>
 4ee:	07 fc       	sbrc	r0, 7
 4f0:	05 d0       	rcall	.+10     	; 0x4fc <__divmodhi4_neg2>
 4f2:	3e f4       	brtc	.+14     	; 0x502 <__divmodhi4_exit>

000004f4 <__divmodhi4_neg1>:
 4f4:	90 95       	com	r25
 4f6:	81 95       	neg	r24
 4f8:	9f 4f       	sbci	r25, 0xFF	; 255
 4fa:	08 95       	ret

000004fc <__divmodhi4_neg2>:
 4fc:	70 95       	com	r23
 4fe:	61 95       	neg	r22
 500:	7f 4f       	sbci	r23, 0xFF	; 255

00000502 <__divmodhi4_exit>:
 502:	08 95       	ret

00000504 <__udivmodhi4>:
 504:	aa 1b       	sub	r26, r26
 506:	bb 1b       	sub	r27, r27
 508:	51 e1       	ldi	r21, 0x11	; 17
 50a:	07 c0       	rjmp	.+14     	; 0x51a <__udivmodhi4_ep>

0000050c <__udivmodhi4_loop>:
 50c:	aa 1f       	adc	r26, r26
 50e:	bb 1f       	adc	r27, r27
 510:	a6 17       	cp	r26, r22
 512:	b7 07       	cpc	r27, r23
 514:	10 f0       	brcs	.+4      	; 0x51a <__udivmodhi4_ep>
 516:	a6 1b       	sub	r26, r22
 518:	b7 0b       	sbc	r27, r23

0000051a <__udivmodhi4_ep>:
 51a:	88 1f       	adc	r24, r24
 51c:	99 1f       	adc	r25, r25
 51e:	5a 95       	dec	r21
 520:	a9 f7       	brne	.-22     	; 0x50c <__udivmodhi4_loop>
 522:	80 95       	com	r24
 524:	90 95       	com	r25
 526:	bc 01       	movw	r22, r24
 528:	cd 01       	movw	r24, r26
 52a:	08 95       	ret

0000052c <strncmp>:
 52c:	fb 01       	movw	r30, r22
 52e:	dc 01       	movw	r26, r24
 530:	41 50       	subi	r20, 0x01	; 1
 532:	50 40       	sbci	r21, 0x00	; 0
 534:	30 f0       	brcs	.+12     	; 0x542 <strncmp+0x16>
 536:	8d 91       	ld	r24, X+
 538:	01 90       	ld	r0, Z+
 53a:	80 19       	sub	r24, r0
 53c:	19 f4       	brne	.+6      	; 0x544 <strncmp+0x18>
 53e:	00 20       	and	r0, r0
 540:	b9 f7       	brne	.-18     	; 0x530 <strncmp+0x4>
 542:	88 1b       	sub	r24, r24
 544:	99 0b       	sbc	r25, r25
 546:	08 95       	ret

00000548 <eeprom_read_word>:
 548:	a8 e1       	ldi	r26, 0x18	; 24
 54a:	b0 e0       	ldi	r27, 0x00	; 0
 54c:	42 e0       	ldi	r20, 0x02	; 2
 54e:	50 e0       	ldi	r21, 0x00	; 0
 550:	0c 94 bf 02 	jmp	0x57e	; 0x57e <eeprom_read_blraw>

00000554 <eeprom_write_byte>:
 554:	26 2f       	mov	r18, r22

00000556 <eeprom_write_r18>:
 556:	f9 99       	sbic	0x1f, 1	; 31
 558:	fe cf       	rjmp	.-4      	; 0x556 <eeprom_write_r18>
 55a:	1f ba       	out	0x1f, r1	; 31
 55c:	92 bd       	out	0x22, r25	; 34
 55e:	81 bd       	out	0x21, r24	; 33
 560:	20 bd       	out	0x20, r18	; 32
 562:	0f b6       	in	r0, 0x3f	; 63
 564:	f8 94       	cli
 566:	fa 9a       	sbi	0x1f, 2	; 31
 568:	f9 9a       	sbi	0x1f, 1	; 31
 56a:	0f be       	out	0x3f, r0	; 63
 56c:	01 96       	adiw	r24, 0x01	; 1
 56e:	08 95       	ret

00000570 <eeprom_write_word>:
 570:	0e 94 aa 02 	call	0x554	; 0x554 <eeprom_write_byte>
 574:	27 2f       	mov	r18, r23
 576:	0c 94 ab 02 	jmp	0x556	; 0x556 <eeprom_write_r18>

0000057a <eeprom_read_block>:
 57a:	dc 01       	movw	r26, r24
 57c:	cb 01       	movw	r24, r22

0000057e <eeprom_read_blraw>:
 57e:	fc 01       	movw	r30, r24
 580:	f9 99       	sbic	0x1f, 1	; 31
 582:	fe cf       	rjmp	.-4      	; 0x580 <eeprom_read_blraw+0x2>
 584:	06 c0       	rjmp	.+12     	; 0x592 <eeprom_read_blraw+0x14>
 586:	f2 bd       	out	0x22, r31	; 34
 588:	e1 bd       	out	0x21, r30	; 33
 58a:	f8 9a       	sbi	0x1f, 0	; 31
 58c:	31 96       	adiw	r30, 0x01	; 1
 58e:	00 b4       	in	r0, 0x20	; 32
 590:	0d 92       	st	X+, r0
 592:	41 50       	subi	r20, 0x01	; 1
 594:	50 40       	sbci	r21, 0x00	; 0
 596:	b8 f7       	brcc	.-18     	; 0x586 <eeprom_read_blraw+0x8>
 598:	08 95       	ret

0000059a <_exit>:
 59a:	f8 94       	cli

0000059c <__stop_program>:
 59c:	ff cf       	rjmp	.-2      	; 0x59c <__stop_program>
