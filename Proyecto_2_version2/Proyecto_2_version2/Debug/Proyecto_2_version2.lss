
Proyecto_2_version2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000bae  00000c42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800118  00800118  00000c5a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001212  00000000  00000000  00000e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a2b  00000000  00000000  000020aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b64  00000000  00000000  00002ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  0000363c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000616  00000000  00000000  000038a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003cd  00000000  00000000  00003eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004283  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 c1 01 	jmp	0x382	; 0x382 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ea       	ldi	r30, 0xAE	; 174
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 33       	cpi	r26, 0x38	; 56
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ad 01 	call	0x35a	; 0x35a <main>
  9e:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:
void adc_init(void) {
	// Configuración del ADC:
	// - Referencia AVcc (REFS0=1)
	// - Justificado a izquierda (ADLAR=1) para leer solo ADCH
	// - Prescaler de 128 (125kHz @ 16MHz)
	ADMUX = (1 << REFS0) | (1 << ADLAR);
  a6:	80 e6       	ldi	r24, 0x60	; 96
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	
	// Habilitar ADC con prescaler de 128
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b2:	08 95       	ret

000000b4 <adc_read>:
}

uint8_t adc_read(uint8_t channel) {
	// Seleccionar canal (0-7) manteniendo la configuración existente
	ADMUX = (ADMUX & 0xF0) | (channel & 0x07);
  b4:	ec e7       	ldi	r30, 0x7C	; 124
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	90 81       	ld	r25, Z
  ba:	90 7f       	andi	r25, 0xF0	; 240
  bc:	87 70       	andi	r24, 0x07	; 7
  be:	89 2b       	or	r24, r25
  c0:	80 83       	st	Z, r24
	
	// Iniciar conversión
	ADCSRA |= (1 << ADSC);
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	80 83       	st	Z, r24
	
	// Esperar fin de conversión
	while (ADCSRA & (1 << ADSC));
  cc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  d0:	86 fd       	sbrc	r24, 6
  d2:	fc cf       	rjmp	.-8      	; 0xcc <adc_read+0x18>
	
	// Retornar solo ADCH (8 bits superiores, gracias a ADLAR=1)
	return ADCH;
  d4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  d8:	08 95       	ret

000000da <constrain>:



// Función para limitar valores dentro de un rango
static uint8_t constrain(uint8_t value, uint8_t min, uint8_t max) {
	if(value < min) return min;
  da:	86 17       	cp	r24, r22
  dc:	20 f0       	brcs	.+8      	; 0xe6 <constrain+0xc>
	if(value > max) return max;
  de:	48 17       	cp	r20, r24
  e0:	18 f4       	brcc	.+6      	; 0xe8 <constrain+0xe>
  e2:	84 2f       	mov	r24, r20
  e4:	08 95       	ret



// Función para limitar valores dentro de un rango
static uint8_t constrain(uint8_t value, uint8_t min, uint8_t max) {
	if(value < min) return min;
  e6:	86 2f       	mov	r24, r22
	if(value > max) return max;
	return value;
}
  e8:	08 95       	ret

000000ea <PWM_init_Timer0>:

void PWM_init_Timer0() {
	DDRD |= (1 << PD6) | (1 << PD5); // Pines OC0A y OC0B como salida
  ea:	8a b1       	in	r24, 0x0a	; 10
  ec:	80 66       	ori	r24, 0x60	; 96
  ee:	8a b9       	out	0x0a, r24	; 10
	TCCR0A = (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);
  f0:	83 ea       	ldi	r24, 0xA3	; 163
  f2:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS02) | (1 << CS00); // Prescaler 1024
  f4:	85 e0       	ldi	r24, 0x05	; 5
  f6:	85 bd       	out	0x25, r24	; 37
  f8:	08 95       	ret

000000fa <PWM_init_Timer1>:
}

void PWM_init_Timer1(uint16_t ICR1_v) {
  fa:	9c 01       	movw	r18, r24
	DDRB |= (1 << PB1) | (1 << PB2);
  fc:	94 b1       	in	r25, 0x04	; 4
  fe:	96 60       	ori	r25, 0x06	; 6
 100:	94 b9       	out	0x04, r25	; 4
	
	// Configurar modo Fast PWM con ICR1 como TOP (Modo 14)
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);
 102:	82 ea       	ldi	r24, 0xA2	; 162
 104:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS12) | (1 << CS10);
 108:	8d e1       	ldi	r24, 0x1D	; 29
 10a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	// Establecer el valor de TOP (define el período PWM)
	ICR1 = ICR1_v;
 10e:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 112:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 116:	08 95       	ret

00000118 <PWM_calculate_servo_8bit>:
}

uint8_t PWM_calculate_servo_8bit(uint8_t value) {
	// Asegurar que el valor está en rango 0-255
	value = constrain(value, 0, 255);
 118:	4f ef       	ldi	r20, 0xFF	; 255
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	0e 94 6d 00 	call	0xda	; 0xda <constrain>
	
	// Mapear 0-255 a 8-39 (para pulso de 0.5ms a 2.5ms)
	// Fórmula: output = 8 + (value / 255.0) * (39 - 8)
	return (uint8_t)(8 + (value * 31) / 255);
 120:	2f e1       	ldi	r18, 0x1F	; 31
 122:	82 9f       	mul	r24, r18
 124:	c0 01       	movw	r24, r0
 126:	11 24       	eor	r1, r1
 128:	6f ef       	ldi	r22, 0xFF	; 255
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	0e 94 9a 02 	call	0x534	; 0x534 <__divmodhi4>
}
 130:	88 e0       	ldi	r24, 0x08	; 8
 132:	86 0f       	add	r24, r22
 134:	08 95       	ret

00000136 <PWM_calculate_servo_16bit>:

uint16_t PWM_calculate_servo_16bit(uint8_t value) {
	// Asegurar que el valor está en rango 0-255
	value = constrain(value, 0, 255);
 136:	4f ef       	ldi	r20, 0xFF	; 255
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	0e 94 6d 00 	call	0xda	; 0xda <constrain>
	
	// Mapear 0-255 a 2000-10000 (para pulso de 0.5ms a 2.5ms en modo 16-bit)
	// Fórmula: output = 2000 + (value / 255.0) * (10000 - 2000)
	return (uint16_t)(16 + ((value * 15 + 127) / 255)); 
 13e:	2f e0       	ldi	r18, 0x0F	; 15
 140:	82 9f       	mul	r24, r18
 142:	c0 01       	movw	r24, r0
 144:	11 24       	eor	r1, r1
 146:	81 58       	subi	r24, 0x81	; 129
 148:	9f 4f       	sbci	r25, 0xFF	; 255
 14a:	6f ef       	ldi	r22, 0xFF	; 255
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	0e 94 9a 02 	call	0x534	; 0x534 <__divmodhi4>
}
 152:	cb 01       	movw	r24, r22
 154:	40 96       	adiw	r24, 0x10	; 16
 156:	08 95       	ret

00000158 <setup>:
// NON-Interrupt subroutines


void setup(){
	
	cli();
 158:	f8 94       	cli
	
	DDRC = 0b00000111; // Declarar Pines de entrada y salida.
 15a:	87 e0       	ldi	r24, 0x07	; 7
 15c:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PORTC3); // Activar pull-up interno en el PB3
 15e:	88 b1       	in	r24, 0x08	; 8
 160:	88 60       	ori	r24, 0x08	; 8
 162:	88 b9       	out	0x08, r24	; 8
	
	// Configuración de interrupciones por cambios en PC3
	
	PCICR |= (1 << PCIE1); // Habilitar Interrupciones en Puerto C
 164:	e8 e6       	ldi	r30, 0x68	; 104
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	82 60       	ori	r24, 0x02	; 2
 16c:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT11); // habilitar interrupciones para PC3
 16e:	ec e6       	ldi	r30, 0x6C	; 108
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	88 60       	ori	r24, 0x08	; 8
 176:	80 83       	st	Z, r24
	
	
	adc_init(); //inicializar ADC
 178:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>
	PWM_init_Timer0(); // Inicializar PWM con el timer0: 61hz-16ms
 17c:	0e 94 75 00 	call	0xea	; 0xea <PWM_init_Timer0>
	PWM_init_Timer1(312); // Inicializar PWM con el timer1 50hz - 20ms
 180:	88 e3       	ldi	r24, 0x38	; 56
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	0e 94 7d 00 	call	0xfa	; 0xfa <PWM_init_Timer1>
	
	// Inicializacion del UART
	
	 UART_init_with_interrupts();
 188:	0e 94 8e 02 	call	0x51c	; 0x51c <UART_init_with_interrupts>
	
	sei();
 18c:	78 94       	sei
 18e:	08 95       	ret

00000190 <control_manual>:

void control_manual(){
	
	//Funcion que controla los servos desde potenciometros
	
	OCR1B =	PWM_calculate_servo_16bit(	adc_read(7)	); // Funciona por medio del canal 7
 190:	87 e0       	ldi	r24, 0x07	; 7
 192:	0e 94 5a 00 	call	0xb4	; 0xb4 <adc_read>
 196:	0e 94 9b 00 	call	0x136	; 0x136 <PWM_calculate_servo_16bit>
 19a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 19e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	OCR1A =	PWM_calculate_servo_16bit(	adc_read(6)	); // Funciona por medio del canal 6
 1a2:	86 e0       	ldi	r24, 0x06	; 6
 1a4:	0e 94 5a 00 	call	0xb4	; 0xb4 <adc_read>
 1a8:	0e 94 9b 00 	call	0x136	; 0x136 <PWM_calculate_servo_16bit>
 1ac:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1b0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	OCR0A = PWM_calculate_servo_8bit(	adc_read(5)	); // Funciona por medio del canal 5
 1b4:	85 e0       	ldi	r24, 0x05	; 5
 1b6:	0e 94 5a 00 	call	0xb4	; 0xb4 <adc_read>
 1ba:	0e 94 8c 00 	call	0x118	; 0x118 <PWM_calculate_servo_8bit>
 1be:	87 bd       	out	0x27, r24	; 39
	OCR0B = PWM_calculate_servo_8bit(	adc_read(4)	); // Funciona por medio del canal 4
 1c0:	84 e0       	ldi	r24, 0x04	; 4
 1c2:	0e 94 5a 00 	call	0xb4	; 0xb4 <adc_read>
 1c6:	0e 94 8c 00 	call	0x118	; 0x118 <PWM_calculate_servo_8bit>
 1ca:	88 bd       	out	0x28, r24	; 40
 1cc:	08 95       	ret

000001ce <guardar_posiciones>:
	
}

void guardar_posiciones(){
	
	data_1 = OCR1B;
 1ce:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 1d2:	70 91 8b 00 	lds	r23, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1d6:	70 93 36 01 	sts	0x0136, r23	; 0x800136 <data_1+0x1>
 1da:	60 93 35 01 	sts	0x0135, r22	; 0x800135 <data_1>
	data_2 = OCR1A;
 1de:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1e2:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1e6:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <data_2+0x1>
 1ea:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <data_2>
	data_3 = OCR0A;
 1ee:	87 b5       	in	r24, 0x27	; 39
 1f0:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <data_3>
	data_4 = OCR0B;
 1f4:	88 b5       	in	r24, 0x28	; 40
 1f6:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <data_4>
	
	
	 eeprom_write_word((uint16_t*)ADDR_data1, data_1);
 1fa:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <ADDR_data1>
 1fe:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <ADDR_data1+0x1>
 202:	0e 94 89 05 	call	0xb12	; 0xb12 <eeprom_write_word>
	 eeprom_write_word((uint16_t*)ADDR_data2, data_2);
 206:	60 91 31 01 	lds	r22, 0x0131	; 0x800131 <data_2>
 20a:	70 91 32 01 	lds	r23, 0x0132	; 0x800132 <data_2+0x1>
 20e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ADDR_data2>
 212:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <ADDR_data2+0x1>
 216:	0e 94 89 05 	call	0xb12	; 0xb12 <eeprom_write_word>
	 eeprom_write_byte((uint8_t*)ADDR_data3, data_3);
 21a:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <data_3>
 21e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ADDR_data3>
 222:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ADDR_data3+0x1>
 226:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <eeprom_write_byte>
	 eeprom_write_byte((uint8_t*)ADDR_data4, data_4);
 22a:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <data_4>
 22e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 232:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 236:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <eeprom_write_byte>
 23a:	08 95       	ret

0000023c <ver_posiciones>:
	
}	

void ver_posiciones(){
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
	
	w_data_1 = eeprom_read_word(	(const uint16_t*)ADDR_data1	); //Leer datos
 240:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <ADDR_data1>
 244:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <ADDR_data1+0x1>
 248:	0e 94 75 05 	call	0xaea	; 0xaea <eeprom_read_word>
 24c:	ec 01       	movw	r28, r24
 24e:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <w_data_1+0x1>
 252:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <w_data_1>
	w_data_2 = eeprom_read_word(	(const uint16_t*)ADDR_data2	);
 256:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ADDR_data2>
 25a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <ADDR_data2+0x1>
 25e:	0e 94 75 05 	call	0xaea	; 0xaea <eeprom_read_word>
 262:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <w_data_2+0x1>
 266:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <w_data_2>
	w_data_3 = eeprom_read_word(	(const uint16_t*)ADDR_data3	);
 26a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ADDR_data3>
 26e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ADDR_data3+0x1>
 272:	0e 94 75 05 	call	0xaea	; 0xaea <eeprom_read_word>
 276:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <w_data_3>
	w_data_4 = eeprom_read_word(	(const uint16_t*)ADDR_data4	);
 27a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 27e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 282:	0e 94 75 05 	call	0xaea	; 0xaea <eeprom_read_word>
 286:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <w_data_4>
	
	OCR1B = w_data_1; // Ejecutar esos datos en los servos
 28a:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 28e:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	OCR1A = w_data_2;
 292:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <w_data_2>
 296:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <w_data_2+0x1>
 29a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 29e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	OCR0A = w_data_3;
 2a2:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <w_data_3>
 2a6:	87 bd       	out	0x27, r24	; 39
	OCR0B = w_data_4;
 2a8:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <w_data_4>
 2ac:	88 bd       	out	0x28, r24	; 40
	
}
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	08 95       	ret

000002b4 <control_EPROM>:
{
	
	
	
	
	switch (opcion)
 2b4:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <opcion>
 2b8:	81 30       	cpi	r24, 0x01	; 1
 2ba:	19 f0       	breq	.+6      	; 0x2c2 <control_EPROM+0xe>
 2bc:	82 30       	cpi	r24, 0x02	; 2
 2be:	21 f0       	breq	.+8      	; 0x2c8 <control_EPROM+0x14>
 2c0:	06 c0       	rjmp	.+12     	; 0x2ce <control_EPROM+0x1a>
		{
		
		case 1:
		
		
		guardar_posiciones(); // Funcion que guarda posiciones
 2c2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <guardar_posiciones>
		
		
		break;
 2c6:	08 95       	ret
		
		case 2:
		
		ver_posiciones(); // Funcion que muestra posiciones guardadas
 2c8:	0e 94 1e 01 	call	0x23c	; 0x23c <ver_posiciones>
		
		break;
 2cc:	08 95       	ret
		
		
		default:
		
		opcion = 0;
 2ce:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <opcion>
 2d2:	08 95       	ret

000002d4 <control_cloud>:
	OCR0B = w_data_4;
	
}


void control_cloud(){
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
	
	OCR1B = PWM_calculate_servo_16bit(	servo_data[0]	);// Ejecutar datos desde la nube
 2d8:	c3 e2       	ldi	r28, 0x23	; 35
 2da:	d1 e0       	ldi	r29, 0x01	; 1
 2dc:	88 81       	ld	r24, Y
 2de:	0e 94 9b 00 	call	0x136	; 0x136 <PWM_calculate_servo_16bit>
 2e2:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 2e6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	OCR1A = PWM_calculate_servo_16bit(	servo_data[1]	);
 2ea:	89 81       	ldd	r24, Y+1	; 0x01
 2ec:	0e 94 9b 00 	call	0x136	; 0x136 <PWM_calculate_servo_16bit>
 2f0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2f4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	OCR0A = PWM_calculate_servo_8bit(	servo_data[2]	);
 2f8:	8a 81       	ldd	r24, Y+2	; 0x02
 2fa:	0e 94 8c 00 	call	0x118	; 0x118 <PWM_calculate_servo_8bit>
 2fe:	87 bd       	out	0x27, r24	; 39
	OCR0B = PWM_calculate_servo_8bit(	servo_data[3]	);
 300:	8b 81       	ldd	r24, Y+3	; 0x03
 302:	0e 94 8c 00 	call	0x118	; 0x118 <PWM_calculate_servo_8bit>
 306:	88 bd       	out	0x28, r24	; 40
	
	
}
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	08 95       	ret

0000030e <modo>:
void modo()
{
	

	
	switch (contador_modo)
 30e:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <contador_modo>
 312:	81 30       	cpi	r24, 0x01	; 1
 314:	69 f0       	breq	.+26     	; 0x330 <modo+0x22>
 316:	18 f0       	brcs	.+6      	; 0x31e <modo+0x10>
 318:	82 30       	cpi	r24, 0x02	; 2
 31a:	99 f0       	breq	.+38     	; 0x342 <modo+0x34>
 31c:	1b c0       	rjmp	.+54     	; 0x354 <modo+0x46>
		{
		
		case 0:
		PORTC |= (1 << 0);
 31e:	88 b1       	in	r24, 0x08	; 8
 320:	81 60       	ori	r24, 0x01	; 1
 322:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~((1 << 1)|(1 << 2));
 324:	88 b1       	in	r24, 0x08	; 8
 326:	89 7f       	andi	r24, 0xF9	; 249
 328:	88 b9       	out	0x08, r24	; 8
		
		control_manual();
 32a:	0e 94 c8 00 	call	0x190	; 0x190 <control_manual>
		
		
		break;
 32e:	08 95       	ret
		
		case 1:
		PORTC |= (1 << 1);
 330:	88 b1       	in	r24, 0x08	; 8
 332:	82 60       	ori	r24, 0x02	; 2
 334:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~((1 << 0)|(1 << 2));
 336:	88 b1       	in	r24, 0x08	; 8
 338:	8a 7f       	andi	r24, 0xFA	; 250
 33a:	88 b9       	out	0x08, r24	; 8
		
		
		control_EPROM();
 33c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <control_EPROM>
		
		break;
 340:	08 95       	ret
		
		case 2:
		PORTC |= (1 << 2);
 342:	88 b1       	in	r24, 0x08	; 8
 344:	84 60       	ori	r24, 0x04	; 4
 346:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~((1 << 0)|(1 << 1));
 348:	88 b1       	in	r24, 0x08	; 8
 34a:	8c 7f       	andi	r24, 0xFC	; 252
 34c:	88 b9       	out	0x08, r24	; 8
		
		
		control_cloud();
 34e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <control_cloud>
		
		break;
 352:	08 95       	ret
		
		default:
		
		contador_modo = 0;
 354:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <contador_modo>
 358:	08 95       	ret

0000035a <main>:

/****************************************/
// Main Function

int main(void) {
	setup();
 35a:	0e 94 ac 00 	call	0x158	; 0x158 <setup>
	
	while(1) {
		
		modo();
 35e:	0e 94 87 01 	call	0x30e	; 0x30e <modo>
 362:	fd cf       	rjmp	.-6      	; 0x35e <main+0x4>

00000364 <UART_putstring>:
	OCR0B = PWM_calculate_servo_8bit(	servo_data[3]	);
	
	
}

void UART_putstring(char* str) {
 364:	fc 01       	movw	r30, r24
	if (!str) return; // Verificación de puntero nulo
 366:	89 2b       	or	r24, r25
 368:	41 f4       	brne	.+16     	; 0x37a <UART_putstring+0x16>
 36a:	08 95       	ret
	
	while (*str != '\0') {
		/* Esperar a que el buffer de transmisión esté vacío */
		while (!(UCSR0A & (1 << UDRE0))) {
 36c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 370:	95 ff       	sbrs	r25, 5
 372:	fc cf       	rjmp	.-8      	; 0x36c <UART_putstring+0x8>
			// Puedes agregar un timeout aquí si es necesario
		};
		
		/* Poner el dato en el buffer y enviar */
		UDR0 = *str;
 374:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		str++;
 378:	31 96       	adiw	r30, 0x01	; 1
}

void UART_putstring(char* str) {
	if (!str) return; // Verificación de puntero nulo
	
	while (*str != '\0') {
 37a:	80 81       	ld	r24, Z
 37c:	81 11       	cpse	r24, r1
 37e:	f6 cf       	rjmp	.-20     	; 0x36c <UART_putstring+0x8>
 380:	08 95       	ret

00000382 <__vector_4>:


/****************************************/
// Interrupt routines

ISR(PCINT1_vect){
 382:	1f 92       	push	r1
 384:	0f 92       	push	r0
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	0f 92       	push	r0
 38a:	11 24       	eor	r1, r1
 38c:	8f 93       	push	r24
	
	
	
	
	if (	!(PINC & (1 << 3))	)
 38e:	33 99       	sbic	0x06, 3	; 6
 390:	05 c0       	rjmp	.+10     	; 0x39c <__vector_4+0x1a>
	{
		contador_modo++; //Cuando se presione el boton, cambiar de modo
 392:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <contador_modo>
 396:	8f 5f       	subi	r24, 0xFF	; 255
 398:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <contador_modo>
	}
	
	
}
 39c:	8f 91       	pop	r24
 39e:	0f 90       	pop	r0
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	0f 90       	pop	r0
 3a4:	1f 90       	pop	r1
 3a6:	18 95       	reti

000003a8 <__vector_18>:



ISR(USART_RX_vect) {
 3a8:	1f 92       	push	r1
 3aa:	0f 92       	push	r0
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	0f 92       	push	r0
 3b0:	11 24       	eor	r1, r1
 3b2:	0f 93       	push	r16
 3b4:	1f 93       	push	r17
 3b6:	2f 93       	push	r18
 3b8:	3f 93       	push	r19
 3ba:	4f 93       	push	r20
 3bc:	5f 93       	push	r21
 3be:	6f 93       	push	r22
 3c0:	7f 93       	push	r23
 3c2:	8f 93       	push	r24
 3c4:	9f 93       	push	r25
 3c6:	af 93       	push	r26
 3c8:	bf 93       	push	r27
 3ca:	ef 93       	push	r30
 3cc:	ff 93       	push	r31
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	cd b7       	in	r28, 0x3d	; 61
 3d4:	de b7       	in	r29, 0x3e	; 62
 3d6:	64 97       	sbiw	r28, 0x14	; 20
 3d8:	de bf       	out	0x3e, r29	; 62
 3da:	cd bf       	out	0x3d, r28	; 61
	static uint8_t buffer[10]; // Buffer para almacenar los datos recibidos
	static uint8_t index = 0;  // Índice del buffer
	static uint8_t receiving = 0; // Flag para indicar que estamos recibiendo datos
	
	uint8_t received = UDR0; // Leer el byte recibido
 3dc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
	if (received == '\n' || received == '\r') {
 3e0:	8a 30       	cpi	r24, 0x0A	; 10
 3e2:	19 f0       	breq	.+6      	; 0x3ea <__vector_18+0x42>
 3e4:	8d 30       	cpi	r24, 0x0D	; 13
 3e6:	09 f0       	breq	.+2      	; 0x3ea <__vector_18+0x42>
 3e8:	6f c0       	rjmp	.+222    	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
		// Fin de comando, procesar el buffer
		buffer[index] = '\0'; // Terminar la cadena
 3ea:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <index.2002>
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	e8 5e       	subi	r30, 0xE8	; 232
 3f2:	fe 4f       	sbci	r31, 0xFE	; 254
 3f4:	10 82       	st	Z, r1
		
		if (contador_modo == 1) {
 3f6:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <contador_modo>
 3fa:	81 30       	cpi	r24, 0x01	; 1
 3fc:	f9 f4       	brne	.+62     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
			// Modo 1: Esperando formato "EP:dato"
			if (buffer[0] == 'E' && buffer[1] == 'P' && buffer[2] == ':') {
 3fe:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 402:	85 34       	cpi	r24, 0x45	; 69
 404:	09 f0       	breq	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 406:	5d c0       	rjmp	.+186    	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 408:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <__data_end+0x1>
 40c:	80 35       	cpi	r24, 0x50	; 80
 40e:	09 f0       	breq	.+2      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 410:	58 c0       	rjmp	.+176    	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 412:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end+0x2>
 416:	8a 33       	cpi	r24, 0x3A	; 58
 418:	09 f0       	breq	.+2      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 41a:	53 c0       	rjmp	.+166    	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
				uint8_t value = buffer[3] - '0'; // Convertir ASCII a número
 41c:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <__data_end+0x3>
 420:	80 53       	subi	r24, 0x30	; 48
				
				if (value <= 2) { // Validar que sea 0, 1 o 2
 422:	83 30       	cpi	r24, 0x03	; 3
 424:	08 f0       	brcs	.+2      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 426:	4d c0       	rjmp	.+154    	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
					opcion = value;
 428:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <opcion>
					flag_control_EPROM = 1; // Activar flag para procesar en main
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <flag_control_EPROM>
					
					// Opcional: enviar confirmación
					UART_putstring("EPROM_OK\n");
 432:	86 e0       	ldi	r24, 0x06	; 6
 434:	91 e0       	ldi	r25, 0x01	; 1
 436:	0e 94 b2 01 	call	0x364	; 0x364 <UART_putstring>
 43a:	43 c0       	rjmp	.+134    	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
				}
			}
		}
		else if (contador_modo == 2) {
 43c:	82 30       	cpi	r24, 0x02	; 2
 43e:	09 f0       	breq	.+2      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 440:	40 c0       	rjmp	.+128    	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
			// Modo 2: Esperando formato "Sn:dato"
			if (buffer[0] == 'S' && buffer[2] == ':') {
 442:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 446:	83 35       	cpi	r24, 0x53	; 83
 448:	e1 f5       	brne	.+120    	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 44a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end+0x2>
 44e:	8a 33       	cpi	r24, 0x3A	; 58
 450:	c1 f5       	brne	.+112    	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
				uint8_t servo_num = buffer[1] - '0'; // Obtener número de servo
 452:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <__data_end+0x1>
 456:	40 ed       	ldi	r20, 0xD0	; 208
 458:	48 0f       	add	r20, r24
				
				if (servo_num >= 1 && servo_num <= 4) {
 45a:	81 53       	subi	r24, 0x31	; 49
 45c:	84 30       	cpi	r24, 0x04	; 4
 45e:	58 f0       	brcs	.+22     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 460:	30 c0       	rjmp	.+96     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
					uint8_t value = 0;
					uint8_t i = 3;
					
					// Convertir los dígitos ASCII a número
					while (buffer[i] >= '0' && buffer[i] <= '9') {
						value = value * 10 + (buffer[i] - '0');
 462:	99 0f       	add	r25, r25
 464:	29 2f       	mov	r18, r25
 466:	22 0f       	add	r18, r18
 468:	22 0f       	add	r18, r18
 46a:	92 0f       	add	r25, r18
 46c:	89 0f       	add	r24, r25
 46e:	90 ed       	ldi	r25, 0xD0	; 208
 470:	98 0f       	add	r25, r24
						i++;
 472:	3f 5f       	subi	r19, 0xFF	; 255
 474:	02 c0       	rjmp	.+4      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 476:	33 e0       	ldi	r19, 0x03	; 3
 478:	90 e0       	ldi	r25, 0x00	; 0
				if (servo_num >= 1 && servo_num <= 4) {
					uint8_t value = 0;
					uint8_t i = 3;
					
					// Convertir los dígitos ASCII a número
					while (buffer[i] >= '0' && buffer[i] <= '9') {
 47a:	e3 2f       	mov	r30, r19
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	e8 5e       	subi	r30, 0xE8	; 232
 480:	fe 4f       	sbci	r31, 0xFE	; 254
 482:	80 81       	ld	r24, Z
 484:	20 ed       	ldi	r18, 0xD0	; 208
 486:	28 0f       	add	r18, r24
 488:	2a 30       	cpi	r18, 0x0A	; 10
 48a:	58 f3       	brcs	.-42     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
						value = value * 10 + (buffer[i] - '0');
						i++;
					}
					
					if (value <= 255) { // Asegurar que es un uint8_t válido
						servo_data[servo_num - 1] = value;
 48c:	e4 2f       	mov	r30, r20
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	ee 5d       	subi	r30, 0xDE	; 222
 492:	fe 4f       	sbci	r31, 0xFE	; 254
 494:	90 83       	st	Z, r25
						
						// Opcional: enviar confirmación
						char confirm[20];
						sprintf(confirm, "S%d_OK\n", servo_num);
 496:	1f 92       	push	r1
 498:	4f 93       	push	r20
 49a:	80 e1       	ldi	r24, 0x10	; 16
 49c:	91 e0       	ldi	r25, 0x01	; 1
 49e:	9f 93       	push	r25
 4a0:	8f 93       	push	r24
 4a2:	8e 01       	movw	r16, r28
 4a4:	0f 5f       	subi	r16, 0xFF	; 255
 4a6:	1f 4f       	sbci	r17, 0xFF	; 255
 4a8:	1f 93       	push	r17
 4aa:	0f 93       	push	r16
 4ac:	0e 94 c2 02 	call	0x584	; 0x584 <sprintf>
						UART_putstring(confirm);
 4b0:	c8 01       	movw	r24, r16
 4b2:	0e 94 b2 01 	call	0x364	; 0x364 <UART_putstring>
 4b6:	0f 90       	pop	r0
 4b8:	0f 90       	pop	r0
 4ba:	0f 90       	pop	r0
 4bc:	0f 90       	pop	r0
 4be:	0f 90       	pop	r0
 4c0:	0f 90       	pop	r0
				}
			}
		}
		
		// Reiniciar para el próximo comando
		index = 0;
 4c2:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <index.2002>
		receiving = 0;
 4c6:	0f c0       	rjmp	.+30     	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
	}
	else {
		// Almacenar el byte en el buffer si hay espacio
		if (index < sizeof(buffer) - 1) {
 4c8:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <index.2002>
 4cc:	e9 30       	cpi	r30, 0x09	; 9
 4ce:	48 f4       	brcc	.+18     	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
			buffer[index++] = received;
 4d0:	91 e0       	ldi	r25, 0x01	; 1
 4d2:	9e 0f       	add	r25, r30
 4d4:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <index.2002>
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	e8 5e       	subi	r30, 0xE8	; 232
 4dc:	fe 4f       	sbci	r31, 0xFE	; 254
 4de:	80 83       	st	Z, r24
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
			} else {
			// Buffer lleno, descartar datos
			index = 0;
 4e2:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <index.2002>
		}
	}
}
 4e6:	64 96       	adiw	r28, 0x14	; 20
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	f8 94       	cli
 4ec:	de bf       	out	0x3e, r29	; 62
 4ee:	0f be       	out	0x3f, r0	; 63
 4f0:	cd bf       	out	0x3d, r28	; 61
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	ff 91       	pop	r31
 4f8:	ef 91       	pop	r30
 4fa:	bf 91       	pop	r27
 4fc:	af 91       	pop	r26
 4fe:	9f 91       	pop	r25
 500:	8f 91       	pop	r24
 502:	7f 91       	pop	r23
 504:	6f 91       	pop	r22
 506:	5f 91       	pop	r21
 508:	4f 91       	pop	r20
 50a:	3f 91       	pop	r19
 50c:	2f 91       	pop	r18
 50e:	1f 91       	pop	r17
 510:	0f 91       	pop	r16
 512:	0f 90       	pop	r0
 514:	0f be       	out	0x3f, r0	; 63
 516:	0f 90       	pop	r0
 518:	1f 90       	pop	r1
 51a:	18 95       	reti

0000051c <UART_init_with_interrupts>:
	}
}

void UART_init_with_interrupts() {
	// Configuración del baud rate
	UBRR0H = (unsigned char)(BAUD_PRESCALLER>>8);
 51c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)BAUD_PRESCALLER;
 520:	87 e6       	ldi	r24, 0x67	; 103
 522:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	// Habilita receptor y transmisor + interrupción por recepción
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
 526:	88 e9       	ldi	r24, 0x98	; 152
 528:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	// Configura formato: 8 bits de datos, 1 bit de parada
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
 52c:	86 e0       	ldi	r24, 0x06	; 6
 52e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 532:	08 95       	ret

00000534 <__divmodhi4>:
 534:	97 fb       	bst	r25, 7
 536:	07 2e       	mov	r0, r23
 538:	16 f4       	brtc	.+4      	; 0x53e <__divmodhi4+0xa>
 53a:	00 94       	com	r0
 53c:	07 d0       	rcall	.+14     	; 0x54c <__divmodhi4_neg1>
 53e:	77 fd       	sbrc	r23, 7
 540:	09 d0       	rcall	.+18     	; 0x554 <__divmodhi4_neg2>
 542:	0e 94 ae 02 	call	0x55c	; 0x55c <__udivmodhi4>
 546:	07 fc       	sbrc	r0, 7
 548:	05 d0       	rcall	.+10     	; 0x554 <__divmodhi4_neg2>
 54a:	3e f4       	brtc	.+14     	; 0x55a <__divmodhi4_exit>

0000054c <__divmodhi4_neg1>:
 54c:	90 95       	com	r25
 54e:	81 95       	neg	r24
 550:	9f 4f       	sbci	r25, 0xFF	; 255
 552:	08 95       	ret

00000554 <__divmodhi4_neg2>:
 554:	70 95       	com	r23
 556:	61 95       	neg	r22
 558:	7f 4f       	sbci	r23, 0xFF	; 255

0000055a <__divmodhi4_exit>:
 55a:	08 95       	ret

0000055c <__udivmodhi4>:
 55c:	aa 1b       	sub	r26, r26
 55e:	bb 1b       	sub	r27, r27
 560:	51 e1       	ldi	r21, 0x11	; 17
 562:	07 c0       	rjmp	.+14     	; 0x572 <__udivmodhi4_ep>

00000564 <__udivmodhi4_loop>:
 564:	aa 1f       	adc	r26, r26
 566:	bb 1f       	adc	r27, r27
 568:	a6 17       	cp	r26, r22
 56a:	b7 07       	cpc	r27, r23
 56c:	10 f0       	brcs	.+4      	; 0x572 <__udivmodhi4_ep>
 56e:	a6 1b       	sub	r26, r22
 570:	b7 0b       	sbc	r27, r23

00000572 <__udivmodhi4_ep>:
 572:	88 1f       	adc	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	5a 95       	dec	r21
 578:	a9 f7       	brne	.-22     	; 0x564 <__udivmodhi4_loop>
 57a:	80 95       	com	r24
 57c:	90 95       	com	r25
 57e:	bc 01       	movw	r22, r24
 580:	cd 01       	movw	r24, r26
 582:	08 95       	ret

00000584 <sprintf>:
 584:	ae e0       	ldi	r26, 0x0E	; 14
 586:	b0 e0       	ldi	r27, 0x00	; 0
 588:	e8 ec       	ldi	r30, 0xC8	; 200
 58a:	f2 e0       	ldi	r31, 0x02	; 2
 58c:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__prologue_saves__+0x1c>
 590:	0d 89       	ldd	r16, Y+21	; 0x15
 592:	1e 89       	ldd	r17, Y+22	; 0x16
 594:	86 e0       	ldi	r24, 0x06	; 6
 596:	8c 83       	std	Y+4, r24	; 0x04
 598:	1a 83       	std	Y+2, r17	; 0x02
 59a:	09 83       	std	Y+1, r16	; 0x01
 59c:	8f ef       	ldi	r24, 0xFF	; 255
 59e:	9f e7       	ldi	r25, 0x7F	; 127
 5a0:	9e 83       	std	Y+6, r25	; 0x06
 5a2:	8d 83       	std	Y+5, r24	; 0x05
 5a4:	ae 01       	movw	r20, r28
 5a6:	47 5e       	subi	r20, 0xE7	; 231
 5a8:	5f 4f       	sbci	r21, 0xFF	; 255
 5aa:	6f 89       	ldd	r22, Y+23	; 0x17
 5ac:	78 8d       	ldd	r23, Y+24	; 0x18
 5ae:	ce 01       	movw	r24, r28
 5b0:	01 96       	adiw	r24, 0x01	; 1
 5b2:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <vfprintf>
 5b6:	ef 81       	ldd	r30, Y+7	; 0x07
 5b8:	f8 85       	ldd	r31, Y+8	; 0x08
 5ba:	e0 0f       	add	r30, r16
 5bc:	f1 1f       	adc	r31, r17
 5be:	10 82       	st	Z, r1
 5c0:	2e 96       	adiw	r28, 0x0e	; 14
 5c2:	e4 e0       	ldi	r30, 0x04	; 4
 5c4:	0c 94 c8 05 	jmp	0xb90	; 0xb90 <__epilogue_restores__+0x1c>

000005c8 <vfprintf>:
 5c8:	ab e0       	ldi	r26, 0x0B	; 11
 5ca:	b0 e0       	ldi	r27, 0x00	; 0
 5cc:	ea ee       	ldi	r30, 0xEA	; 234
 5ce:	f2 e0       	ldi	r31, 0x02	; 2
 5d0:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <__prologue_saves__>
 5d4:	6c 01       	movw	r12, r24
 5d6:	7b 01       	movw	r14, r22
 5d8:	8a 01       	movw	r16, r20
 5da:	fc 01       	movw	r30, r24
 5dc:	17 82       	std	Z+7, r1	; 0x07
 5de:	16 82       	std	Z+6, r1	; 0x06
 5e0:	83 81       	ldd	r24, Z+3	; 0x03
 5e2:	81 ff       	sbrs	r24, 1
 5e4:	cc c1       	rjmp	.+920    	; 0x97e <__stack+0x7f>
 5e6:	ce 01       	movw	r24, r28
 5e8:	01 96       	adiw	r24, 0x01	; 1
 5ea:	3c 01       	movw	r6, r24
 5ec:	f6 01       	movw	r30, r12
 5ee:	93 81       	ldd	r25, Z+3	; 0x03
 5f0:	f7 01       	movw	r30, r14
 5f2:	93 fd       	sbrc	r25, 3
 5f4:	85 91       	lpm	r24, Z+
 5f6:	93 ff       	sbrs	r25, 3
 5f8:	81 91       	ld	r24, Z+
 5fa:	7f 01       	movw	r14, r30
 5fc:	88 23       	and	r24, r24
 5fe:	09 f4       	brne	.+2      	; 0x602 <vfprintf+0x3a>
 600:	ba c1       	rjmp	.+884    	; 0x976 <__stack+0x77>
 602:	85 32       	cpi	r24, 0x25	; 37
 604:	39 f4       	brne	.+14     	; 0x614 <vfprintf+0x4c>
 606:	93 fd       	sbrc	r25, 3
 608:	85 91       	lpm	r24, Z+
 60a:	93 ff       	sbrs	r25, 3
 60c:	81 91       	ld	r24, Z+
 60e:	7f 01       	movw	r14, r30
 610:	85 32       	cpi	r24, 0x25	; 37
 612:	29 f4       	brne	.+10     	; 0x61e <vfprintf+0x56>
 614:	b6 01       	movw	r22, r12
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	0e 94 db 04 	call	0x9b6	; 0x9b6 <fputc>
 61c:	e7 cf       	rjmp	.-50     	; 0x5ec <vfprintf+0x24>
 61e:	91 2c       	mov	r9, r1
 620:	21 2c       	mov	r2, r1
 622:	31 2c       	mov	r3, r1
 624:	ff e1       	ldi	r31, 0x1F	; 31
 626:	f3 15       	cp	r31, r3
 628:	d8 f0       	brcs	.+54     	; 0x660 <vfprintf+0x98>
 62a:	8b 32       	cpi	r24, 0x2B	; 43
 62c:	79 f0       	breq	.+30     	; 0x64c <vfprintf+0x84>
 62e:	38 f4       	brcc	.+14     	; 0x63e <vfprintf+0x76>
 630:	80 32       	cpi	r24, 0x20	; 32
 632:	79 f0       	breq	.+30     	; 0x652 <vfprintf+0x8a>
 634:	83 32       	cpi	r24, 0x23	; 35
 636:	a1 f4       	brne	.+40     	; 0x660 <vfprintf+0x98>
 638:	23 2d       	mov	r18, r3
 63a:	20 61       	ori	r18, 0x10	; 16
 63c:	1d c0       	rjmp	.+58     	; 0x678 <vfprintf+0xb0>
 63e:	8d 32       	cpi	r24, 0x2D	; 45
 640:	61 f0       	breq	.+24     	; 0x65a <vfprintf+0x92>
 642:	80 33       	cpi	r24, 0x30	; 48
 644:	69 f4       	brne	.+26     	; 0x660 <vfprintf+0x98>
 646:	23 2d       	mov	r18, r3
 648:	21 60       	ori	r18, 0x01	; 1
 64a:	16 c0       	rjmp	.+44     	; 0x678 <vfprintf+0xb0>
 64c:	83 2d       	mov	r24, r3
 64e:	82 60       	ori	r24, 0x02	; 2
 650:	38 2e       	mov	r3, r24
 652:	e3 2d       	mov	r30, r3
 654:	e4 60       	ori	r30, 0x04	; 4
 656:	3e 2e       	mov	r3, r30
 658:	2a c0       	rjmp	.+84     	; 0x6ae <vfprintf+0xe6>
 65a:	f3 2d       	mov	r31, r3
 65c:	f8 60       	ori	r31, 0x08	; 8
 65e:	1d c0       	rjmp	.+58     	; 0x69a <vfprintf+0xd2>
 660:	37 fc       	sbrc	r3, 7
 662:	2d c0       	rjmp	.+90     	; 0x6be <vfprintf+0xf6>
 664:	20 ed       	ldi	r18, 0xD0	; 208
 666:	28 0f       	add	r18, r24
 668:	2a 30       	cpi	r18, 0x0A	; 10
 66a:	40 f0       	brcs	.+16     	; 0x67c <vfprintf+0xb4>
 66c:	8e 32       	cpi	r24, 0x2E	; 46
 66e:	b9 f4       	brne	.+46     	; 0x69e <vfprintf+0xd6>
 670:	36 fc       	sbrc	r3, 6
 672:	81 c1       	rjmp	.+770    	; 0x976 <__stack+0x77>
 674:	23 2d       	mov	r18, r3
 676:	20 64       	ori	r18, 0x40	; 64
 678:	32 2e       	mov	r3, r18
 67a:	19 c0       	rjmp	.+50     	; 0x6ae <vfprintf+0xe6>
 67c:	36 fe       	sbrs	r3, 6
 67e:	06 c0       	rjmp	.+12     	; 0x68c <vfprintf+0xc4>
 680:	8a e0       	ldi	r24, 0x0A	; 10
 682:	98 9e       	mul	r9, r24
 684:	20 0d       	add	r18, r0
 686:	11 24       	eor	r1, r1
 688:	92 2e       	mov	r9, r18
 68a:	11 c0       	rjmp	.+34     	; 0x6ae <vfprintf+0xe6>
 68c:	ea e0       	ldi	r30, 0x0A	; 10
 68e:	2e 9e       	mul	r2, r30
 690:	20 0d       	add	r18, r0
 692:	11 24       	eor	r1, r1
 694:	22 2e       	mov	r2, r18
 696:	f3 2d       	mov	r31, r3
 698:	f0 62       	ori	r31, 0x20	; 32
 69a:	3f 2e       	mov	r3, r31
 69c:	08 c0       	rjmp	.+16     	; 0x6ae <vfprintf+0xe6>
 69e:	8c 36       	cpi	r24, 0x6C	; 108
 6a0:	21 f4       	brne	.+8      	; 0x6aa <vfprintf+0xe2>
 6a2:	83 2d       	mov	r24, r3
 6a4:	80 68       	ori	r24, 0x80	; 128
 6a6:	38 2e       	mov	r3, r24
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <vfprintf+0xe6>
 6aa:	88 36       	cpi	r24, 0x68	; 104
 6ac:	41 f4       	brne	.+16     	; 0x6be <vfprintf+0xf6>
 6ae:	f7 01       	movw	r30, r14
 6b0:	93 fd       	sbrc	r25, 3
 6b2:	85 91       	lpm	r24, Z+
 6b4:	93 ff       	sbrs	r25, 3
 6b6:	81 91       	ld	r24, Z+
 6b8:	7f 01       	movw	r14, r30
 6ba:	81 11       	cpse	r24, r1
 6bc:	b3 cf       	rjmp	.-154    	; 0x624 <vfprintf+0x5c>
 6be:	98 2f       	mov	r25, r24
 6c0:	9f 7d       	andi	r25, 0xDF	; 223
 6c2:	95 54       	subi	r25, 0x45	; 69
 6c4:	93 30       	cpi	r25, 0x03	; 3
 6c6:	28 f4       	brcc	.+10     	; 0x6d2 <vfprintf+0x10a>
 6c8:	0c 5f       	subi	r16, 0xFC	; 252
 6ca:	1f 4f       	sbci	r17, 0xFF	; 255
 6cc:	9f e3       	ldi	r25, 0x3F	; 63
 6ce:	99 83       	std	Y+1, r25	; 0x01
 6d0:	0d c0       	rjmp	.+26     	; 0x6ec <vfprintf+0x124>
 6d2:	83 36       	cpi	r24, 0x63	; 99
 6d4:	31 f0       	breq	.+12     	; 0x6e2 <vfprintf+0x11a>
 6d6:	83 37       	cpi	r24, 0x73	; 115
 6d8:	71 f0       	breq	.+28     	; 0x6f6 <vfprintf+0x12e>
 6da:	83 35       	cpi	r24, 0x53	; 83
 6dc:	09 f0       	breq	.+2      	; 0x6e0 <vfprintf+0x118>
 6de:	59 c0       	rjmp	.+178    	; 0x792 <vfprintf+0x1ca>
 6e0:	21 c0       	rjmp	.+66     	; 0x724 <vfprintf+0x15c>
 6e2:	f8 01       	movw	r30, r16
 6e4:	80 81       	ld	r24, Z
 6e6:	89 83       	std	Y+1, r24	; 0x01
 6e8:	0e 5f       	subi	r16, 0xFE	; 254
 6ea:	1f 4f       	sbci	r17, 0xFF	; 255
 6ec:	88 24       	eor	r8, r8
 6ee:	83 94       	inc	r8
 6f0:	91 2c       	mov	r9, r1
 6f2:	53 01       	movw	r10, r6
 6f4:	13 c0       	rjmp	.+38     	; 0x71c <vfprintf+0x154>
 6f6:	28 01       	movw	r4, r16
 6f8:	f2 e0       	ldi	r31, 0x02	; 2
 6fa:	4f 0e       	add	r4, r31
 6fc:	51 1c       	adc	r5, r1
 6fe:	f8 01       	movw	r30, r16
 700:	a0 80       	ld	r10, Z
 702:	b1 80       	ldd	r11, Z+1	; 0x01
 704:	36 fe       	sbrs	r3, 6
 706:	03 c0       	rjmp	.+6      	; 0x70e <vfprintf+0x146>
 708:	69 2d       	mov	r22, r9
 70a:	70 e0       	ldi	r23, 0x00	; 0
 70c:	02 c0       	rjmp	.+4      	; 0x712 <vfprintf+0x14a>
 70e:	6f ef       	ldi	r22, 0xFF	; 255
 710:	7f ef       	ldi	r23, 0xFF	; 255
 712:	c5 01       	movw	r24, r10
 714:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <strnlen>
 718:	4c 01       	movw	r8, r24
 71a:	82 01       	movw	r16, r4
 71c:	f3 2d       	mov	r31, r3
 71e:	ff 77       	andi	r31, 0x7F	; 127
 720:	3f 2e       	mov	r3, r31
 722:	16 c0       	rjmp	.+44     	; 0x750 <vfprintf+0x188>
 724:	28 01       	movw	r4, r16
 726:	22 e0       	ldi	r18, 0x02	; 2
 728:	42 0e       	add	r4, r18
 72a:	51 1c       	adc	r5, r1
 72c:	f8 01       	movw	r30, r16
 72e:	a0 80       	ld	r10, Z
 730:	b1 80       	ldd	r11, Z+1	; 0x01
 732:	36 fe       	sbrs	r3, 6
 734:	03 c0       	rjmp	.+6      	; 0x73c <vfprintf+0x174>
 736:	69 2d       	mov	r22, r9
 738:	70 e0       	ldi	r23, 0x00	; 0
 73a:	02 c0       	rjmp	.+4      	; 0x740 <vfprintf+0x178>
 73c:	6f ef       	ldi	r22, 0xFF	; 255
 73e:	7f ef       	ldi	r23, 0xFF	; 255
 740:	c5 01       	movw	r24, r10
 742:	0e 94 c5 04 	call	0x98a	; 0x98a <strnlen_P>
 746:	4c 01       	movw	r8, r24
 748:	f3 2d       	mov	r31, r3
 74a:	f0 68       	ori	r31, 0x80	; 128
 74c:	3f 2e       	mov	r3, r31
 74e:	82 01       	movw	r16, r4
 750:	33 fc       	sbrc	r3, 3
 752:	1b c0       	rjmp	.+54     	; 0x78a <vfprintf+0x1c2>
 754:	82 2d       	mov	r24, r2
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	88 16       	cp	r8, r24
 75a:	99 06       	cpc	r9, r25
 75c:	b0 f4       	brcc	.+44     	; 0x78a <vfprintf+0x1c2>
 75e:	b6 01       	movw	r22, r12
 760:	80 e2       	ldi	r24, 0x20	; 32
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0e 94 db 04 	call	0x9b6	; 0x9b6 <fputc>
 768:	2a 94       	dec	r2
 76a:	f4 cf       	rjmp	.-24     	; 0x754 <vfprintf+0x18c>
 76c:	f5 01       	movw	r30, r10
 76e:	37 fc       	sbrc	r3, 7
 770:	85 91       	lpm	r24, Z+
 772:	37 fe       	sbrs	r3, 7
 774:	81 91       	ld	r24, Z+
 776:	5f 01       	movw	r10, r30
 778:	b6 01       	movw	r22, r12
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	0e 94 db 04 	call	0x9b6	; 0x9b6 <fputc>
 780:	21 10       	cpse	r2, r1
 782:	2a 94       	dec	r2
 784:	21 e0       	ldi	r18, 0x01	; 1
 786:	82 1a       	sub	r8, r18
 788:	91 08       	sbc	r9, r1
 78a:	81 14       	cp	r8, r1
 78c:	91 04       	cpc	r9, r1
 78e:	71 f7       	brne	.-36     	; 0x76c <vfprintf+0x1a4>
 790:	e8 c0       	rjmp	.+464    	; 0x962 <__stack+0x63>
 792:	84 36       	cpi	r24, 0x64	; 100
 794:	11 f0       	breq	.+4      	; 0x79a <vfprintf+0x1d2>
 796:	89 36       	cpi	r24, 0x69	; 105
 798:	41 f5       	brne	.+80     	; 0x7ea <vfprintf+0x222>
 79a:	f8 01       	movw	r30, r16
 79c:	37 fe       	sbrs	r3, 7
 79e:	07 c0       	rjmp	.+14     	; 0x7ae <vfprintf+0x1e6>
 7a0:	60 81       	ld	r22, Z
 7a2:	71 81       	ldd	r23, Z+1	; 0x01
 7a4:	82 81       	ldd	r24, Z+2	; 0x02
 7a6:	93 81       	ldd	r25, Z+3	; 0x03
 7a8:	0c 5f       	subi	r16, 0xFC	; 252
 7aa:	1f 4f       	sbci	r17, 0xFF	; 255
 7ac:	08 c0       	rjmp	.+16     	; 0x7be <vfprintf+0x1f6>
 7ae:	60 81       	ld	r22, Z
 7b0:	71 81       	ldd	r23, Z+1	; 0x01
 7b2:	07 2e       	mov	r0, r23
 7b4:	00 0c       	add	r0, r0
 7b6:	88 0b       	sbc	r24, r24
 7b8:	99 0b       	sbc	r25, r25
 7ba:	0e 5f       	subi	r16, 0xFE	; 254
 7bc:	1f 4f       	sbci	r17, 0xFF	; 255
 7be:	f3 2d       	mov	r31, r3
 7c0:	ff 76       	andi	r31, 0x6F	; 111
 7c2:	3f 2e       	mov	r3, r31
 7c4:	97 ff       	sbrs	r25, 7
 7c6:	09 c0       	rjmp	.+18     	; 0x7da <vfprintf+0x212>
 7c8:	90 95       	com	r25
 7ca:	80 95       	com	r24
 7cc:	70 95       	com	r23
 7ce:	61 95       	neg	r22
 7d0:	7f 4f       	sbci	r23, 0xFF	; 255
 7d2:	8f 4f       	sbci	r24, 0xFF	; 255
 7d4:	9f 4f       	sbci	r25, 0xFF	; 255
 7d6:	f0 68       	ori	r31, 0x80	; 128
 7d8:	3f 2e       	mov	r3, r31
 7da:	2a e0       	ldi	r18, 0x0A	; 10
 7dc:	30 e0       	ldi	r19, 0x00	; 0
 7de:	a3 01       	movw	r20, r6
 7e0:	0e 94 17 05 	call	0xa2e	; 0xa2e <__ultoa_invert>
 7e4:	88 2e       	mov	r8, r24
 7e6:	86 18       	sub	r8, r6
 7e8:	45 c0       	rjmp	.+138    	; 0x874 <__DATA_REGION_LENGTH__+0x74>
 7ea:	85 37       	cpi	r24, 0x75	; 117
 7ec:	31 f4       	brne	.+12     	; 0x7fa <vfprintf+0x232>
 7ee:	23 2d       	mov	r18, r3
 7f0:	2f 7e       	andi	r18, 0xEF	; 239
 7f2:	b2 2e       	mov	r11, r18
 7f4:	2a e0       	ldi	r18, 0x0A	; 10
 7f6:	30 e0       	ldi	r19, 0x00	; 0
 7f8:	25 c0       	rjmp	.+74     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 7fa:	93 2d       	mov	r25, r3
 7fc:	99 7f       	andi	r25, 0xF9	; 249
 7fe:	b9 2e       	mov	r11, r25
 800:	8f 36       	cpi	r24, 0x6F	; 111
 802:	c1 f0       	breq	.+48     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 804:	18 f4       	brcc	.+6      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 806:	88 35       	cpi	r24, 0x58	; 88
 808:	79 f0       	breq	.+30     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 80a:	b5 c0       	rjmp	.+362    	; 0x976 <__stack+0x77>
 80c:	80 37       	cpi	r24, 0x70	; 112
 80e:	19 f0       	breq	.+6      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 810:	88 37       	cpi	r24, 0x78	; 120
 812:	21 f0       	breq	.+8      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 814:	b0 c0       	rjmp	.+352    	; 0x976 <__stack+0x77>
 816:	e9 2f       	mov	r30, r25
 818:	e0 61       	ori	r30, 0x10	; 16
 81a:	be 2e       	mov	r11, r30
 81c:	b4 fe       	sbrs	r11, 4
 81e:	0d c0       	rjmp	.+26     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 820:	fb 2d       	mov	r31, r11
 822:	f4 60       	ori	r31, 0x04	; 4
 824:	bf 2e       	mov	r11, r31
 826:	09 c0       	rjmp	.+18     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 828:	34 fe       	sbrs	r3, 4
 82a:	0a c0       	rjmp	.+20     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 82c:	29 2f       	mov	r18, r25
 82e:	26 60       	ori	r18, 0x06	; 6
 830:	b2 2e       	mov	r11, r18
 832:	06 c0       	rjmp	.+12     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 834:	28 e0       	ldi	r18, 0x08	; 8
 836:	30 e0       	ldi	r19, 0x00	; 0
 838:	05 c0       	rjmp	.+10     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 83a:	20 e1       	ldi	r18, 0x10	; 16
 83c:	30 e0       	ldi	r19, 0x00	; 0
 83e:	02 c0       	rjmp	.+4      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 840:	20 e1       	ldi	r18, 0x10	; 16
 842:	32 e0       	ldi	r19, 0x02	; 2
 844:	f8 01       	movw	r30, r16
 846:	b7 fe       	sbrs	r11, 7
 848:	07 c0       	rjmp	.+14     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 84a:	60 81       	ld	r22, Z
 84c:	71 81       	ldd	r23, Z+1	; 0x01
 84e:	82 81       	ldd	r24, Z+2	; 0x02
 850:	93 81       	ldd	r25, Z+3	; 0x03
 852:	0c 5f       	subi	r16, 0xFC	; 252
 854:	1f 4f       	sbci	r17, 0xFF	; 255
 856:	06 c0       	rjmp	.+12     	; 0x864 <__DATA_REGION_LENGTH__+0x64>
 858:	60 81       	ld	r22, Z
 85a:	71 81       	ldd	r23, Z+1	; 0x01
 85c:	80 e0       	ldi	r24, 0x00	; 0
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	0e 5f       	subi	r16, 0xFE	; 254
 862:	1f 4f       	sbci	r17, 0xFF	; 255
 864:	a3 01       	movw	r20, r6
 866:	0e 94 17 05 	call	0xa2e	; 0xa2e <__ultoa_invert>
 86a:	88 2e       	mov	r8, r24
 86c:	86 18       	sub	r8, r6
 86e:	fb 2d       	mov	r31, r11
 870:	ff 77       	andi	r31, 0x7F	; 127
 872:	3f 2e       	mov	r3, r31
 874:	36 fe       	sbrs	r3, 6
 876:	0d c0       	rjmp	.+26     	; 0x892 <__DATA_REGION_LENGTH__+0x92>
 878:	23 2d       	mov	r18, r3
 87a:	2e 7f       	andi	r18, 0xFE	; 254
 87c:	a2 2e       	mov	r10, r18
 87e:	89 14       	cp	r8, r9
 880:	58 f4       	brcc	.+22     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 882:	34 fe       	sbrs	r3, 4
 884:	0b c0       	rjmp	.+22     	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
 886:	32 fc       	sbrc	r3, 2
 888:	09 c0       	rjmp	.+18     	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
 88a:	83 2d       	mov	r24, r3
 88c:	8e 7e       	andi	r24, 0xEE	; 238
 88e:	a8 2e       	mov	r10, r24
 890:	05 c0       	rjmp	.+10     	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
 892:	b8 2c       	mov	r11, r8
 894:	a3 2c       	mov	r10, r3
 896:	03 c0       	rjmp	.+6      	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
 898:	b8 2c       	mov	r11, r8
 89a:	01 c0       	rjmp	.+2      	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
 89c:	b9 2c       	mov	r11, r9
 89e:	a4 fe       	sbrs	r10, 4
 8a0:	0f c0       	rjmp	.+30     	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
 8a2:	fe 01       	movw	r30, r28
 8a4:	e8 0d       	add	r30, r8
 8a6:	f1 1d       	adc	r31, r1
 8a8:	80 81       	ld	r24, Z
 8aa:	80 33       	cpi	r24, 0x30	; 48
 8ac:	21 f4       	brne	.+8      	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
 8ae:	9a 2d       	mov	r25, r10
 8b0:	99 7e       	andi	r25, 0xE9	; 233
 8b2:	a9 2e       	mov	r10, r25
 8b4:	09 c0       	rjmp	.+18     	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 8b6:	a2 fe       	sbrs	r10, 2
 8b8:	06 c0       	rjmp	.+12     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
 8ba:	b3 94       	inc	r11
 8bc:	b3 94       	inc	r11
 8be:	04 c0       	rjmp	.+8      	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 8c0:	8a 2d       	mov	r24, r10
 8c2:	86 78       	andi	r24, 0x86	; 134
 8c4:	09 f0       	breq	.+2      	; 0x8c8 <__DATA_REGION_LENGTH__+0xc8>
 8c6:	b3 94       	inc	r11
 8c8:	a3 fc       	sbrc	r10, 3
 8ca:	11 c0       	rjmp	.+34     	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
 8cc:	a0 fe       	sbrs	r10, 0
 8ce:	06 c0       	rjmp	.+12     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
 8d0:	b2 14       	cp	r11, r2
 8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
 8d4:	28 0c       	add	r2, r8
 8d6:	92 2c       	mov	r9, r2
 8d8:	9b 18       	sub	r9, r11
 8da:	0e c0       	rjmp	.+28     	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
 8dc:	b2 14       	cp	r11, r2
 8de:	60 f4       	brcc	.+24     	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
 8e0:	b6 01       	movw	r22, r12
 8e2:	80 e2       	ldi	r24, 0x20	; 32
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	0e 94 db 04 	call	0x9b6	; 0x9b6 <fputc>
 8ea:	b3 94       	inc	r11
 8ec:	f7 cf       	rjmp	.-18     	; 0x8dc <__DATA_REGION_LENGTH__+0xdc>
 8ee:	b2 14       	cp	r11, r2
 8f0:	18 f4       	brcc	.+6      	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
 8f2:	2b 18       	sub	r2, r11
 8f4:	02 c0       	rjmp	.+4      	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
 8f6:	98 2c       	mov	r9, r8
 8f8:	21 2c       	mov	r2, r1
 8fa:	a4 fe       	sbrs	r10, 4
 8fc:	10 c0       	rjmp	.+32     	; 0x91e <__stack+0x1f>
 8fe:	b6 01       	movw	r22, r12
 900:	80 e3       	ldi	r24, 0x30	; 48
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	0e 94 db 04 	call	0x9b6	; 0x9b6 <fputc>
 908:	a2 fe       	sbrs	r10, 2
 90a:	17 c0       	rjmp	.+46     	; 0x93a <__stack+0x3b>
 90c:	a1 fc       	sbrc	r10, 1
 90e:	03 c0       	rjmp	.+6      	; 0x916 <__stack+0x17>
 910:	88 e7       	ldi	r24, 0x78	; 120
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	02 c0       	rjmp	.+4      	; 0x91a <__stack+0x1b>
 916:	88 e5       	ldi	r24, 0x58	; 88
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	b6 01       	movw	r22, r12
 91c:	0c c0       	rjmp	.+24     	; 0x936 <__stack+0x37>
 91e:	8a 2d       	mov	r24, r10
 920:	86 78       	andi	r24, 0x86	; 134
 922:	59 f0       	breq	.+22     	; 0x93a <__stack+0x3b>
 924:	a1 fe       	sbrs	r10, 1
 926:	02 c0       	rjmp	.+4      	; 0x92c <__stack+0x2d>
 928:	8b e2       	ldi	r24, 0x2B	; 43
 92a:	01 c0       	rjmp	.+2      	; 0x92e <__stack+0x2f>
 92c:	80 e2       	ldi	r24, 0x20	; 32
 92e:	a7 fc       	sbrc	r10, 7
 930:	8d e2       	ldi	r24, 0x2D	; 45
 932:	b6 01       	movw	r22, r12
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	0e 94 db 04 	call	0x9b6	; 0x9b6 <fputc>
 93a:	89 14       	cp	r8, r9
 93c:	38 f4       	brcc	.+14     	; 0x94c <__stack+0x4d>
 93e:	b6 01       	movw	r22, r12
 940:	80 e3       	ldi	r24, 0x30	; 48
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	0e 94 db 04 	call	0x9b6	; 0x9b6 <fputc>
 948:	9a 94       	dec	r9
 94a:	f7 cf       	rjmp	.-18     	; 0x93a <__stack+0x3b>
 94c:	8a 94       	dec	r8
 94e:	f3 01       	movw	r30, r6
 950:	e8 0d       	add	r30, r8
 952:	f1 1d       	adc	r31, r1
 954:	80 81       	ld	r24, Z
 956:	b6 01       	movw	r22, r12
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	0e 94 db 04 	call	0x9b6	; 0x9b6 <fputc>
 95e:	81 10       	cpse	r8, r1
 960:	f5 cf       	rjmp	.-22     	; 0x94c <__stack+0x4d>
 962:	22 20       	and	r2, r2
 964:	09 f4       	brne	.+2      	; 0x968 <__stack+0x69>
 966:	42 ce       	rjmp	.-892    	; 0x5ec <vfprintf+0x24>
 968:	b6 01       	movw	r22, r12
 96a:	80 e2       	ldi	r24, 0x20	; 32
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <fputc>
 972:	2a 94       	dec	r2
 974:	f6 cf       	rjmp	.-20     	; 0x962 <__stack+0x63>
 976:	f6 01       	movw	r30, r12
 978:	86 81       	ldd	r24, Z+6	; 0x06
 97a:	97 81       	ldd	r25, Z+7	; 0x07
 97c:	02 c0       	rjmp	.+4      	; 0x982 <__stack+0x83>
 97e:	8f ef       	ldi	r24, 0xFF	; 255
 980:	9f ef       	ldi	r25, 0xFF	; 255
 982:	2b 96       	adiw	r28, 0x0b	; 11
 984:	e2 e1       	ldi	r30, 0x12	; 18
 986:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <__epilogue_restores__>

0000098a <strnlen_P>:
 98a:	fc 01       	movw	r30, r24
 98c:	05 90       	lpm	r0, Z+
 98e:	61 50       	subi	r22, 0x01	; 1
 990:	70 40       	sbci	r23, 0x00	; 0
 992:	01 10       	cpse	r0, r1
 994:	d8 f7       	brcc	.-10     	; 0x98c <strnlen_P+0x2>
 996:	80 95       	com	r24
 998:	90 95       	com	r25
 99a:	8e 0f       	add	r24, r30
 99c:	9f 1f       	adc	r25, r31
 99e:	08 95       	ret

000009a0 <strnlen>:
 9a0:	fc 01       	movw	r30, r24
 9a2:	61 50       	subi	r22, 0x01	; 1
 9a4:	70 40       	sbci	r23, 0x00	; 0
 9a6:	01 90       	ld	r0, Z+
 9a8:	01 10       	cpse	r0, r1
 9aa:	d8 f7       	brcc	.-10     	; 0x9a2 <strnlen+0x2>
 9ac:	80 95       	com	r24
 9ae:	90 95       	com	r25
 9b0:	8e 0f       	add	r24, r30
 9b2:	9f 1f       	adc	r25, r31
 9b4:	08 95       	ret

000009b6 <fputc>:
 9b6:	0f 93       	push	r16
 9b8:	1f 93       	push	r17
 9ba:	cf 93       	push	r28
 9bc:	df 93       	push	r29
 9be:	fb 01       	movw	r30, r22
 9c0:	23 81       	ldd	r18, Z+3	; 0x03
 9c2:	21 fd       	sbrc	r18, 1
 9c4:	03 c0       	rjmp	.+6      	; 0x9cc <fputc+0x16>
 9c6:	8f ef       	ldi	r24, 0xFF	; 255
 9c8:	9f ef       	ldi	r25, 0xFF	; 255
 9ca:	2c c0       	rjmp	.+88     	; 0xa24 <fputc+0x6e>
 9cc:	22 ff       	sbrs	r18, 2
 9ce:	16 c0       	rjmp	.+44     	; 0x9fc <fputc+0x46>
 9d0:	46 81       	ldd	r20, Z+6	; 0x06
 9d2:	57 81       	ldd	r21, Z+7	; 0x07
 9d4:	24 81       	ldd	r18, Z+4	; 0x04
 9d6:	35 81       	ldd	r19, Z+5	; 0x05
 9d8:	42 17       	cp	r20, r18
 9da:	53 07       	cpc	r21, r19
 9dc:	44 f4       	brge	.+16     	; 0x9ee <fputc+0x38>
 9de:	a0 81       	ld	r26, Z
 9e0:	b1 81       	ldd	r27, Z+1	; 0x01
 9e2:	9d 01       	movw	r18, r26
 9e4:	2f 5f       	subi	r18, 0xFF	; 255
 9e6:	3f 4f       	sbci	r19, 0xFF	; 255
 9e8:	31 83       	std	Z+1, r19	; 0x01
 9ea:	20 83       	st	Z, r18
 9ec:	8c 93       	st	X, r24
 9ee:	26 81       	ldd	r18, Z+6	; 0x06
 9f0:	37 81       	ldd	r19, Z+7	; 0x07
 9f2:	2f 5f       	subi	r18, 0xFF	; 255
 9f4:	3f 4f       	sbci	r19, 0xFF	; 255
 9f6:	37 83       	std	Z+7, r19	; 0x07
 9f8:	26 83       	std	Z+6, r18	; 0x06
 9fa:	14 c0       	rjmp	.+40     	; 0xa24 <fputc+0x6e>
 9fc:	8b 01       	movw	r16, r22
 9fe:	ec 01       	movw	r28, r24
 a00:	fb 01       	movw	r30, r22
 a02:	00 84       	ldd	r0, Z+8	; 0x08
 a04:	f1 85       	ldd	r31, Z+9	; 0x09
 a06:	e0 2d       	mov	r30, r0
 a08:	09 95       	icall
 a0a:	89 2b       	or	r24, r25
 a0c:	e1 f6       	brne	.-72     	; 0x9c6 <fputc+0x10>
 a0e:	d8 01       	movw	r26, r16
 a10:	16 96       	adiw	r26, 0x06	; 6
 a12:	8d 91       	ld	r24, X+
 a14:	9c 91       	ld	r25, X
 a16:	17 97       	sbiw	r26, 0x07	; 7
 a18:	01 96       	adiw	r24, 0x01	; 1
 a1a:	17 96       	adiw	r26, 0x07	; 7
 a1c:	9c 93       	st	X, r25
 a1e:	8e 93       	st	-X, r24
 a20:	16 97       	sbiw	r26, 0x06	; 6
 a22:	ce 01       	movw	r24, r28
 a24:	df 91       	pop	r29
 a26:	cf 91       	pop	r28
 a28:	1f 91       	pop	r17
 a2a:	0f 91       	pop	r16
 a2c:	08 95       	ret

00000a2e <__ultoa_invert>:
 a2e:	fa 01       	movw	r30, r20
 a30:	aa 27       	eor	r26, r26
 a32:	28 30       	cpi	r18, 0x08	; 8
 a34:	51 f1       	breq	.+84     	; 0xa8a <__ultoa_invert+0x5c>
 a36:	20 31       	cpi	r18, 0x10	; 16
 a38:	81 f1       	breq	.+96     	; 0xa9a <__ultoa_invert+0x6c>
 a3a:	e8 94       	clt
 a3c:	6f 93       	push	r22
 a3e:	6e 7f       	andi	r22, 0xFE	; 254
 a40:	6e 5f       	subi	r22, 0xFE	; 254
 a42:	7f 4f       	sbci	r23, 0xFF	; 255
 a44:	8f 4f       	sbci	r24, 0xFF	; 255
 a46:	9f 4f       	sbci	r25, 0xFF	; 255
 a48:	af 4f       	sbci	r26, 0xFF	; 255
 a4a:	b1 e0       	ldi	r27, 0x01	; 1
 a4c:	3e d0       	rcall	.+124    	; 0xaca <__ultoa_invert+0x9c>
 a4e:	b4 e0       	ldi	r27, 0x04	; 4
 a50:	3c d0       	rcall	.+120    	; 0xaca <__ultoa_invert+0x9c>
 a52:	67 0f       	add	r22, r23
 a54:	78 1f       	adc	r23, r24
 a56:	89 1f       	adc	r24, r25
 a58:	9a 1f       	adc	r25, r26
 a5a:	a1 1d       	adc	r26, r1
 a5c:	68 0f       	add	r22, r24
 a5e:	79 1f       	adc	r23, r25
 a60:	8a 1f       	adc	r24, r26
 a62:	91 1d       	adc	r25, r1
 a64:	a1 1d       	adc	r26, r1
 a66:	6a 0f       	add	r22, r26
 a68:	71 1d       	adc	r23, r1
 a6a:	81 1d       	adc	r24, r1
 a6c:	91 1d       	adc	r25, r1
 a6e:	a1 1d       	adc	r26, r1
 a70:	20 d0       	rcall	.+64     	; 0xab2 <__ultoa_invert+0x84>
 a72:	09 f4       	brne	.+2      	; 0xa76 <__ultoa_invert+0x48>
 a74:	68 94       	set
 a76:	3f 91       	pop	r19
 a78:	2a e0       	ldi	r18, 0x0A	; 10
 a7a:	26 9f       	mul	r18, r22
 a7c:	11 24       	eor	r1, r1
 a7e:	30 19       	sub	r19, r0
 a80:	30 5d       	subi	r19, 0xD0	; 208
 a82:	31 93       	st	Z+, r19
 a84:	de f6       	brtc	.-74     	; 0xa3c <__ultoa_invert+0xe>
 a86:	cf 01       	movw	r24, r30
 a88:	08 95       	ret
 a8a:	46 2f       	mov	r20, r22
 a8c:	47 70       	andi	r20, 0x07	; 7
 a8e:	40 5d       	subi	r20, 0xD0	; 208
 a90:	41 93       	st	Z+, r20
 a92:	b3 e0       	ldi	r27, 0x03	; 3
 a94:	0f d0       	rcall	.+30     	; 0xab4 <__ultoa_invert+0x86>
 a96:	c9 f7       	brne	.-14     	; 0xa8a <__ultoa_invert+0x5c>
 a98:	f6 cf       	rjmp	.-20     	; 0xa86 <__ultoa_invert+0x58>
 a9a:	46 2f       	mov	r20, r22
 a9c:	4f 70       	andi	r20, 0x0F	; 15
 a9e:	40 5d       	subi	r20, 0xD0	; 208
 aa0:	4a 33       	cpi	r20, 0x3A	; 58
 aa2:	18 f0       	brcs	.+6      	; 0xaaa <__ultoa_invert+0x7c>
 aa4:	49 5d       	subi	r20, 0xD9	; 217
 aa6:	31 fd       	sbrc	r19, 1
 aa8:	40 52       	subi	r20, 0x20	; 32
 aaa:	41 93       	st	Z+, r20
 aac:	02 d0       	rcall	.+4      	; 0xab2 <__ultoa_invert+0x84>
 aae:	a9 f7       	brne	.-22     	; 0xa9a <__ultoa_invert+0x6c>
 ab0:	ea cf       	rjmp	.-44     	; 0xa86 <__ultoa_invert+0x58>
 ab2:	b4 e0       	ldi	r27, 0x04	; 4
 ab4:	a6 95       	lsr	r26
 ab6:	97 95       	ror	r25
 ab8:	87 95       	ror	r24
 aba:	77 95       	ror	r23
 abc:	67 95       	ror	r22
 abe:	ba 95       	dec	r27
 ac0:	c9 f7       	brne	.-14     	; 0xab4 <__ultoa_invert+0x86>
 ac2:	00 97       	sbiw	r24, 0x00	; 0
 ac4:	61 05       	cpc	r22, r1
 ac6:	71 05       	cpc	r23, r1
 ac8:	08 95       	ret
 aca:	9b 01       	movw	r18, r22
 acc:	ac 01       	movw	r20, r24
 ace:	0a 2e       	mov	r0, r26
 ad0:	06 94       	lsr	r0
 ad2:	57 95       	ror	r21
 ad4:	47 95       	ror	r20
 ad6:	37 95       	ror	r19
 ad8:	27 95       	ror	r18
 ada:	ba 95       	dec	r27
 adc:	c9 f7       	brne	.-14     	; 0xad0 <__ultoa_invert+0xa2>
 ade:	62 0f       	add	r22, r18
 ae0:	73 1f       	adc	r23, r19
 ae2:	84 1f       	adc	r24, r20
 ae4:	95 1f       	adc	r25, r21
 ae6:	a0 1d       	adc	r26, r0
 ae8:	08 95       	ret

00000aea <eeprom_read_word>:
 aea:	a8 e1       	ldi	r26, 0x18	; 24
 aec:	b0 e0       	ldi	r27, 0x00	; 0
 aee:	42 e0       	ldi	r20, 0x02	; 2
 af0:	50 e0       	ldi	r21, 0x00	; 0
 af2:	0c 94 90 05 	jmp	0xb20	; 0xb20 <eeprom_read_blraw>

00000af6 <eeprom_write_byte>:
 af6:	26 2f       	mov	r18, r22

00000af8 <eeprom_write_r18>:
 af8:	f9 99       	sbic	0x1f, 1	; 31
 afa:	fe cf       	rjmp	.-4      	; 0xaf8 <eeprom_write_r18>
 afc:	1f ba       	out	0x1f, r1	; 31
 afe:	92 bd       	out	0x22, r25	; 34
 b00:	81 bd       	out	0x21, r24	; 33
 b02:	20 bd       	out	0x20, r18	; 32
 b04:	0f b6       	in	r0, 0x3f	; 63
 b06:	f8 94       	cli
 b08:	fa 9a       	sbi	0x1f, 2	; 31
 b0a:	f9 9a       	sbi	0x1f, 1	; 31
 b0c:	0f be       	out	0x3f, r0	; 63
 b0e:	01 96       	adiw	r24, 0x01	; 1
 b10:	08 95       	ret

00000b12 <eeprom_write_word>:
 b12:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <eeprom_write_byte>
 b16:	27 2f       	mov	r18, r23
 b18:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <eeprom_write_r18>

00000b1c <eeprom_read_block>:
 b1c:	dc 01       	movw	r26, r24
 b1e:	cb 01       	movw	r24, r22

00000b20 <eeprom_read_blraw>:
 b20:	fc 01       	movw	r30, r24
 b22:	f9 99       	sbic	0x1f, 1	; 31
 b24:	fe cf       	rjmp	.-4      	; 0xb22 <eeprom_read_blraw+0x2>
 b26:	06 c0       	rjmp	.+12     	; 0xb34 <eeprom_read_blraw+0x14>
 b28:	f2 bd       	out	0x22, r31	; 34
 b2a:	e1 bd       	out	0x21, r30	; 33
 b2c:	f8 9a       	sbi	0x1f, 0	; 31
 b2e:	31 96       	adiw	r30, 0x01	; 1
 b30:	00 b4       	in	r0, 0x20	; 32
 b32:	0d 92       	st	X+, r0
 b34:	41 50       	subi	r20, 0x01	; 1
 b36:	50 40       	sbci	r21, 0x00	; 0
 b38:	b8 f7       	brcc	.-18     	; 0xb28 <eeprom_read_blraw+0x8>
 b3a:	08 95       	ret

00000b3c <__prologue_saves__>:
 b3c:	2f 92       	push	r2
 b3e:	3f 92       	push	r3
 b40:	4f 92       	push	r4
 b42:	5f 92       	push	r5
 b44:	6f 92       	push	r6
 b46:	7f 92       	push	r7
 b48:	8f 92       	push	r8
 b4a:	9f 92       	push	r9
 b4c:	af 92       	push	r10
 b4e:	bf 92       	push	r11
 b50:	cf 92       	push	r12
 b52:	df 92       	push	r13
 b54:	ef 92       	push	r14
 b56:	ff 92       	push	r15
 b58:	0f 93       	push	r16
 b5a:	1f 93       	push	r17
 b5c:	cf 93       	push	r28
 b5e:	df 93       	push	r29
 b60:	cd b7       	in	r28, 0x3d	; 61
 b62:	de b7       	in	r29, 0x3e	; 62
 b64:	ca 1b       	sub	r28, r26
 b66:	db 0b       	sbc	r29, r27
 b68:	0f b6       	in	r0, 0x3f	; 63
 b6a:	f8 94       	cli
 b6c:	de bf       	out	0x3e, r29	; 62
 b6e:	0f be       	out	0x3f, r0	; 63
 b70:	cd bf       	out	0x3d, r28	; 61
 b72:	09 94       	ijmp

00000b74 <__epilogue_restores__>:
 b74:	2a 88       	ldd	r2, Y+18	; 0x12
 b76:	39 88       	ldd	r3, Y+17	; 0x11
 b78:	48 88       	ldd	r4, Y+16	; 0x10
 b7a:	5f 84       	ldd	r5, Y+15	; 0x0f
 b7c:	6e 84       	ldd	r6, Y+14	; 0x0e
 b7e:	7d 84       	ldd	r7, Y+13	; 0x0d
 b80:	8c 84       	ldd	r8, Y+12	; 0x0c
 b82:	9b 84       	ldd	r9, Y+11	; 0x0b
 b84:	aa 84       	ldd	r10, Y+10	; 0x0a
 b86:	b9 84       	ldd	r11, Y+9	; 0x09
 b88:	c8 84       	ldd	r12, Y+8	; 0x08
 b8a:	df 80       	ldd	r13, Y+7	; 0x07
 b8c:	ee 80       	ldd	r14, Y+6	; 0x06
 b8e:	fd 80       	ldd	r15, Y+5	; 0x05
 b90:	0c 81       	ldd	r16, Y+4	; 0x04
 b92:	1b 81       	ldd	r17, Y+3	; 0x03
 b94:	aa 81       	ldd	r26, Y+2	; 0x02
 b96:	b9 81       	ldd	r27, Y+1	; 0x01
 b98:	ce 0f       	add	r28, r30
 b9a:	d1 1d       	adc	r29, r1
 b9c:	0f b6       	in	r0, 0x3f	; 63
 b9e:	f8 94       	cli
 ba0:	de bf       	out	0x3e, r29	; 62
 ba2:	0f be       	out	0x3f, r0	; 63
 ba4:	cd bf       	out	0x3d, r28	; 61
 ba6:	ed 01       	movw	r28, r26
 ba8:	08 95       	ret

00000baa <_exit>:
 baa:	f8 94       	cli

00000bac <__stop_program>:
 bac:	ff cf       	rjmp	.-2      	; 0xbac <__stop_program>
