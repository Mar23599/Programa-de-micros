
Pre lab 5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000030a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000296  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000030a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000030a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000033c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008c7  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073d  00000000  00000000  00000ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000042c  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  0000180c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040e  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000199  00000000  00000000  00001ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001e3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  88:	0c 94 49 01 	jmp	0x292	; 0x292 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_inicializar>:
}


void ADC_inicializar(){
	
	    ADMUX = (1 << REFS0) | (1 << ADLAR);
  90:	80 e6       	ldi	r24, 0x60	; 96
  92:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	    ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1);
  96:	86 e8       	ldi	r24, 0x86	; 134
  98:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  9c:	08 95       	ret

0000009e <setup>:
// NON-Interrupt subroutines


void setup(){
	
	cli();
  9e:	f8 94       	cli
		
	//Registros DDRn
	
	DDRC = 0x00; // Declarar puerto C como entrada.
  a0:	17 b8       	out	0x07, r1	; 7
	
	//ADC_inicializar();
	
	ADC_inicializar();
  a2:	0e 94 48 00 	call	0x90	; 0x90 <ADC_inicializar>
	
	TMR0_init_PWM(1024); // Periodo de 16ms
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	94 e0       	ldi	r25, 0x04	; 4
  aa:	0e 94 9a 00 	call	0x134	; 0x134 <TMR0_init_PWM>
	TMR1_init_PWM(1024, 312); //Periodo de 20ms
  ae:	68 e3       	ldi	r22, 0x38	; 56
  b0:	71 e0       	ldi	r23, 0x01	; 1
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	94 e0       	ldi	r25, 0x04	; 4
  b6:	0e 94 d5 00 	call	0x1aa	; 0x1aa <TMR1_init_PWM>
	
	//ADC_init(); // Inicializar el ADC. Sin seleccionar el canal
	sei();
  ba:	78 94       	sei
  bc:	08 95       	ret

000000be <ADC_lecture_canal>:
	
}

uint8_t ADC_lecture_canal (uint8_t canal){
	
	ADMUX = (ADMUX & 0xF0) | (canal & 0x07);
  be:	ec e7       	ldi	r30, 0x7C	; 124
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	90 81       	ld	r25, Z
  c4:	90 7f       	andi	r25, 0xF0	; 240
  c6:	87 70       	andi	r24, 0x07	; 7
  c8:	89 2b       	or	r24, r25
  ca:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADSC);
  cc:	ea e7       	ldi	r30, 0x7A	; 122
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	80 83       	st	Z, r24
	while(ADCSRA & (1 << ADSC));
  d6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  da:	86 fd       	sbrc	r24, 6
  dc:	fc cf       	rjmp	.-8      	; 0xd6 <ADC_lecture_canal+0x18>
	
	uint8_t ADC_H = ADCH;
  de:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	
	return ADC_H;
}
  e2:	08 95       	ret

000000e4 <main>:
// Main Function

int main(void)
{
	
	setup();
  e4:	0e 94 4f 00 	call	0x9e	; 0x9e <setup>

	while (1)
	{
		 
	ADC_lecture = ADC_lecture_canal(7);
  e8:	87 e0       	ldi	r24, 0x07	; 7
  ea:	0e 94 5f 00 	call	0xbe	; 0xbe <ADC_lecture_canal>
  ee:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ADC_lecture>
	OCR0A = 11 + (ADC_lecture * 25)/255; // Debe variar entre 16 - 24 - 32
  f2:	c9 e1       	ldi	r28, 0x19	; 25
  f4:	c8 9f       	mul	r28, r24
  f6:	c0 01       	movw	r24, r0
  f8:	11 24       	eor	r1, r1
  fa:	0f ef       	ldi	r16, 0xFF	; 255
  fc:	10 e0       	ldi	r17, 0x00	; 0
  fe:	b8 01       	movw	r22, r16
 100:	0e 94 21 01 	call	0x242	; 0x242 <__divmodhi4>
 104:	65 5f       	subi	r22, 0xF5	; 245
 106:	67 bd       	out	0x27, r22	; 39
	 
	ADC_lecture2 = ADC_lecture_canal(6);
 108:	86 e0       	ldi	r24, 0x06	; 6
 10a:	0e 94 5f 00 	call	0xbe	; 0xbe <ADC_lecture_canal>
 10e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	OCR1A = 14+ (ADC_lecture2 * 25)/255; //Debe variar entre 11 y 36
 112:	c8 9f       	mul	r28, r24
 114:	c0 01       	movw	r24, r0
 116:	11 24       	eor	r1, r1
 118:	b8 01       	movw	r22, r16
 11a:	0e 94 21 01 	call	0x242	; 0x242 <__divmodhi4>
 11e:	62 5f       	subi	r22, 0xF2	; 242
 120:	7f 4f       	sbci	r23, 0xFF	; 255
 122:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 126:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	OCR0B = ADC_lecture_canal(5);
 12a:	85 e0       	ldi	r24, 0x05	; 5
 12c:	0e 94 5f 00 	call	0xbe	; 0xbe <ADC_lecture_canal>
 130:	88 bd       	out	0x28, r24	; 40
 132:	da cf       	rjmp	.-76     	; 0xe8 <main+0x4>

00000134 <TMR0_init_PWM>:
	//Esta función coloca el PWM en modo FAST y NO invertido automaticamente.
	//Las salidas del PWM del timer0 se encuentran en:
	
	// PD5 -- OC0A y PD6 -- OC0B 
	
	DDRD |= (1 << PD5) | (1 << PD6); //Declarar salidas del PWM del timer1 en PD5 y PD6
 134:	2a b1       	in	r18, 0x0a	; 10
 136:	20 66       	ori	r18, 0x60	; 96
 138:	2a b9       	out	0x0a, r18	; 10
	REFERENCIA PARA USO: El prescaler de 1024 y TCNT0 = 255  genera :
			Frecuencia = 61Hz
			Periodo: 0.0164s = 16.4ms
	*/
	
	TCCR0A = 0;	// Limpiar cualquier configuracion previa
 13a:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0; // Limpiar cualquier configuración previa
 13c:	15 bc       	out	0x25, r1	; 37
	
	TCCR0A |= (1 << COM0A1); // Colocar el modo FAST NO invertido
 13e:	24 b5       	in	r18, 0x24	; 36
 140:	20 68       	ori	r18, 0x80	; 128
 142:	24 bd       	out	0x24, r18	; 36
	TCCR0A |= (1 << COM0B1);
 144:	24 b5       	in	r18, 0x24	; 36
 146:	20 62       	ori	r18, 0x20	; 32
 148:	24 bd       	out	0x24, r18	; 36
	TCCR0A |= (1 << WGM01) | (1 << WGM00); // Colocar Fast PWM
 14a:	24 b5       	in	r18, 0x24	; 36
 14c:	23 60       	ori	r18, 0x03	; 3
 14e:	24 bd       	out	0x24, r18	; 36
	TCCR0B &= ~(1 << WGM02) ;
 150:	25 b5       	in	r18, 0x25	; 37
 152:	27 7f       	andi	r18, 0xF7	; 247
 154:	25 bd       	out	0x25, r18	; 37
	
	switch (prescaler){
 156:	80 34       	cpi	r24, 0x40	; 64
 158:	91 05       	cpc	r25, r1
 15a:	b9 f0       	breq	.+46     	; 0x18a <TMR0_init_PWM+0x56>
 15c:	30 f4       	brcc	.+12     	; 0x16a <TMR0_init_PWM+0x36>
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	91 05       	cpc	r25, r1
 162:	59 f0       	breq	.+22     	; 0x17a <TMR0_init_PWM+0x46>
 164:	08 97       	sbiw	r24, 0x08	; 8
 166:	69 f0       	breq	.+26     	; 0x182 <TMR0_init_PWM+0x4e>
 168:	1c c0       	rjmp	.+56     	; 0x1a2 <TMR0_init_PWM+0x6e>
 16a:	81 15       	cp	r24, r1
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	92 07       	cpc	r25, r18
 170:	81 f0       	breq	.+32     	; 0x192 <TMR0_init_PWM+0x5e>
 172:	81 15       	cp	r24, r1
 174:	94 40       	sbci	r25, 0x04	; 4
 176:	89 f0       	breq	.+34     	; 0x19a <TMR0_init_PWM+0x66>
 178:	14 c0       	rjmp	.+40     	; 0x1a2 <TMR0_init_PWM+0x6e>
		
		case 1:
		TCCR0B |= (1 << CS00); //No prescaler
 17a:	85 b5       	in	r24, 0x25	; 37
 17c:	81 60       	ori	r24, 0x01	; 1
 17e:	85 bd       	out	0x25, r24	; 37
		break;
 180:	08 95       	ret
		
		case 8:
		TCCR0B |= (1 << CS01); // Prescaler de 8
 182:	85 b5       	in	r24, 0x25	; 37
 184:	82 60       	ori	r24, 0x02	; 2
 186:	85 bd       	out	0x25, r24	; 37
		break;
 188:	08 95       	ret
		
		case 64:
		TCCR0B |= (1 << CS01)|(1 << CS00); // Prescaler de 64
 18a:	85 b5       	in	r24, 0x25	; 37
 18c:	83 60       	ori	r24, 0x03	; 3
 18e:	85 bd       	out	0x25, r24	; 37
		break;
 190:	08 95       	ret
		
		case 256:
		TCCR0B |= (1 << CS02); // Prescaler de 256
 192:	85 b5       	in	r24, 0x25	; 37
 194:	84 60       	ori	r24, 0x04	; 4
 196:	85 bd       	out	0x25, r24	; 37
		break;
 198:	08 95       	ret
		
		case 1024:
		TCCR0B |= (1 << CS02)|(1 << CS00); // Prescaler de 1024
 19a:	85 b5       	in	r24, 0x25	; 37
 19c:	85 60       	ori	r24, 0x05	; 5
 19e:	85 bd       	out	0x25, r24	; 37
		break;
 1a0:	08 95       	ret
		
		default:
		TCCR0B |= (1 << CS02)|(1 << CS00); // El prescaler en caso defaul sera 1024
 1a2:	85 b5       	in	r24, 0x25	; 37
 1a4:	85 60       	ori	r24, 0x05	; 5
 1a6:	85 bd       	out	0x25, r24	; 37
 1a8:	08 95       	ret

000001aa <TMR1_init_PWM>:
	
		//Esta función coloca el PWM en modo FAST y NO invertido automaticamente.
		//Las salidas del PWM del timer1 se encuentran en:
		// PB1 -- OC1A y PB2 -- OC1B
		
	 DDRB |= (1 << PB1) | (1 << PB2);  // Pines 9 y 10 como salidas PWM del timer1
 1aa:	24 b1       	in	r18, 0x04	; 4
 1ac:	26 60       	ori	r18, 0x06	; 6
 1ae:	24 b9       	out	0x04, r18	; 4
	 
	 TCCR1A = 0;
 1b0:	e0 e8       	ldi	r30, 0x80	; 128
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	10 82       	st	Z, r1
	 TCCR1B = 0; // Borrar cualquier configuración previa de ambos registros
 1b6:	a1 e8       	ldi	r26, 0x81	; 129
 1b8:	b0 e0       	ldi	r27, 0x00	; 0
 1ba:	1c 92       	st	X, r1
	 
	 TCCR1A |= (1 << COM1A1) | (1 << COM1B1); // Setear modo NO invertido
 1bc:	20 81       	ld	r18, Z
 1be:	20 6a       	ori	r18, 0xA0	; 160
 1c0:	20 83       	st	Z, r18
	 TCCR1A |= (1 << WGM11);	//Setear modo FAST
 1c2:	20 81       	ld	r18, Z
 1c4:	22 60       	ori	r18, 0x02	; 2
 1c6:	20 83       	st	Z, r18
	 TCCR1B |= (1 << WGM13) | (1 << WGM12); // Setear top en ICR1
 1c8:	2c 91       	ld	r18, X
 1ca:	28 61       	ori	r18, 0x18	; 24
 1cc:	2c 93       	st	X, r18
	 
	 switch (prescaler){
 1ce:	80 34       	cpi	r24, 0x40	; 64
 1d0:	91 05       	cpc	r25, r1
 1d2:	d9 f0       	breq	.+54     	; 0x20a <TMR1_init_PWM+0x60>
 1d4:	30 f4       	brcc	.+12     	; 0x1e2 <TMR1_init_PWM+0x38>
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	91 05       	cpc	r25, r1
 1da:	59 f0       	breq	.+22     	; 0x1f2 <TMR1_init_PWM+0x48>
 1dc:	08 97       	sbiw	r24, 0x08	; 8
 1de:	79 f0       	breq	.+30     	; 0x1fe <TMR1_init_PWM+0x54>
 1e0:	26 c0       	rjmp	.+76     	; 0x22e <TMR1_init_PWM+0x84>
 1e2:	81 15       	cp	r24, r1
 1e4:	21 e0       	ldi	r18, 0x01	; 1
 1e6:	92 07       	cpc	r25, r18
 1e8:	b1 f0       	breq	.+44     	; 0x216 <TMR1_init_PWM+0x6c>
 1ea:	81 15       	cp	r24, r1
 1ec:	94 40       	sbci	r25, 0x04	; 4
 1ee:	c9 f0       	breq	.+50     	; 0x222 <TMR1_init_PWM+0x78>
 1f0:	1e c0       	rjmp	.+60     	; 0x22e <TMR1_init_PWM+0x84>
		 
		 case 1:
		 TCCR1B |= (1 << CS10); // Prescaler  = 1
 1f2:	e1 e8       	ldi	r30, 0x81	; 129
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	81 60       	ori	r24, 0x01	; 1
 1fa:	80 83       	st	Z, r24
		 break;
 1fc:	1d c0       	rjmp	.+58     	; 0x238 <TMR1_init_PWM+0x8e>
		 
		 case 8:
		 TCCR1B |= ( 1 << CS11); //Prescaler = 8
 1fe:	e1 e8       	ldi	r30, 0x81	; 129
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	82 60       	ori	r24, 0x02	; 2
 206:	80 83       	st	Z, r24
		 break;
 208:	17 c0       	rjmp	.+46     	; 0x238 <TMR1_init_PWM+0x8e>
		 
		 case 64:
		 TCCR1B |= (1 << CS11) | (1 << CS10); //Prescaler de 64
 20a:	e1 e8       	ldi	r30, 0x81	; 129
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	83 60       	ori	r24, 0x03	; 3
 212:	80 83       	st	Z, r24
		 break;
 214:	11 c0       	rjmp	.+34     	; 0x238 <TMR1_init_PWM+0x8e>
		 
		 case 256:
		 TCCR1B |= (1 << CS12);
 216:	e1 e8       	ldi	r30, 0x81	; 129
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	84 60       	ori	r24, 0x04	; 4
 21e:	80 83       	st	Z, r24
		 break;
 220:	0b c0       	rjmp	.+22     	; 0x238 <TMR1_init_PWM+0x8e>
		 
		 case 1024:
		 TCCR1B |= ( 1 << CS12) | (1 << CS10); // Prescaler de 1024
 222:	e1 e8       	ldi	r30, 0x81	; 129
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	85 60       	ori	r24, 0x05	; 5
 22a:	80 83       	st	Z, r24
		 break;
 22c:	05 c0       	rjmp	.+10     	; 0x238 <TMR1_init_PWM+0x8e>
		 
		 default:
		 TCCR1B |= ( 1 << CS12) | (1 << CS10); // Prescaler de 1024 por default
 22e:	e1 e8       	ldi	r30, 0x81	; 129
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	85 60       	ori	r24, 0x05	; 5
 236:	80 83       	st	Z, r24
		 
	 }
	   
	 ICR1 = ICR1_value; // Configura el TOP de la función  
 238:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 23c:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 240:	08 95       	ret

00000242 <__divmodhi4>:
 242:	97 fb       	bst	r25, 7
 244:	07 2e       	mov	r0, r23
 246:	16 f4       	brtc	.+4      	; 0x24c <__divmodhi4+0xa>
 248:	00 94       	com	r0
 24a:	07 d0       	rcall	.+14     	; 0x25a <__divmodhi4_neg1>
 24c:	77 fd       	sbrc	r23, 7
 24e:	09 d0       	rcall	.+18     	; 0x262 <__divmodhi4_neg2>
 250:	0e 94 35 01 	call	0x26a	; 0x26a <__udivmodhi4>
 254:	07 fc       	sbrc	r0, 7
 256:	05 d0       	rcall	.+10     	; 0x262 <__divmodhi4_neg2>
 258:	3e f4       	brtc	.+14     	; 0x268 <__divmodhi4_exit>

0000025a <__divmodhi4_neg1>:
 25a:	90 95       	com	r25
 25c:	81 95       	neg	r24
 25e:	9f 4f       	sbci	r25, 0xFF	; 255
 260:	08 95       	ret

00000262 <__divmodhi4_neg2>:
 262:	70 95       	com	r23
 264:	61 95       	neg	r22
 266:	7f 4f       	sbci	r23, 0xFF	; 255

00000268 <__divmodhi4_exit>:
 268:	08 95       	ret

0000026a <__udivmodhi4>:
 26a:	aa 1b       	sub	r26, r26
 26c:	bb 1b       	sub	r27, r27
 26e:	51 e1       	ldi	r21, 0x11	; 17
 270:	07 c0       	rjmp	.+14     	; 0x280 <__udivmodhi4_ep>

00000272 <__udivmodhi4_loop>:
 272:	aa 1f       	adc	r26, r26
 274:	bb 1f       	adc	r27, r27
 276:	a6 17       	cp	r26, r22
 278:	b7 07       	cpc	r27, r23
 27a:	10 f0       	brcs	.+4      	; 0x280 <__udivmodhi4_ep>
 27c:	a6 1b       	sub	r26, r22
 27e:	b7 0b       	sbc	r27, r23

00000280 <__udivmodhi4_ep>:
 280:	88 1f       	adc	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	5a 95       	dec	r21
 286:	a9 f7       	brne	.-22     	; 0x272 <__udivmodhi4_loop>
 288:	80 95       	com	r24
 28a:	90 95       	com	r25
 28c:	bc 01       	movw	r22, r24
 28e:	cd 01       	movw	r24, r26
 290:	08 95       	ret

00000292 <_exit>:
 292:	f8 94       	cli

00000294 <__stop_program>:
 294:	ff cf       	rjmp	.-2      	; 0x294 <__stop_program>
